package com.johnpolacek.media {		import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.external.ExternalInterface;	import flash.net.LocalConnection;	import com.johnpolacek.display.VideoDisplay;	import com.johnpolacek.events.UIEvent;	import com.johnpolacek.utils.DisplayUtils;		/**	 * VideoObject	 *	 * A Flash video player used for embedding video on a web page.	 *	 * Use swfobject to embed vidobject.swf on a web page and then pass the 	 * video url through the FlashVars param:	 *	 * <code><param name="FlashVars" value="video=video/placeholder640x360.mp4" /></code>	 *	 * @see com.johnpolacek.display.VideoDisplay	 * @see com.johnpolacek.display.VideoStreamPlayer	 * 	 * @version 	 * <b>29 Mar 2010</b> <br>	 * 	 * @author John Polacek, john@johnpolacek.com	 */	 	public class VideoObject extends MovieClip	{		private static const BASE_WIDTH:int = 640;		private static const BASE_HEIGHT:int = 360;				public var trackingEnabled:Boolean = false;		public var videoURL:String;		public var video:VideoDisplay;				private var videoAutoPlay:Boolean = false;		private var videoAutoRewind:Boolean = true;				public function VideoObject()		{			stage.scaleMode = StageScaleMode.NO_SCALE;						// Get path to domain			var domainURL:String = "";			if (ExternalInterface.available)				domainURL += ExternalInterface.call("window.location.href.toString");			domainURL = domainURL.substring(0, domainURL.lastIndexOf("/"));			domainURL += "/";						// Get parameters and set values			var playerButtonColor:uint = 0x999999;			var playerBackgroundColor:uint = 0x111111;			try 			{				var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;				if (paramObj.video)					videoURL = domainURL + paramObj.video;									if (paramObj.tracking && ExternalInterface.available)						trackingEnabled = paramObj.tracking=="true";										if (paramObj.buttonColor)					playerButtonColor = DisplayUtils.getColorCodeFromString(paramObj.buttonColor);								if (paramObj.backgroundColor)					playerBackgroundColor = DisplayUtils.getColorCodeFromString(paramObj.backgroundColor);									videoAutoPlay = (String(paramObj.autoPlay) == "true");				videoAutoRewind = (String(paramObj.autoRewind) == "false");			} 			catch (error:Error) 			{				trace(error.toString());			}						// Create VideoDisplay			video = new VideoDisplay();			video.autoPlay = videoAutoPlay;			video.autoRewind = videoAutoRewind;			video.backgroundColor = playerBackgroundColor;			video.buttonColor = playerButtonColor;			video.showControls = true;			video.player.autoHideController();			video.addEventListener(Event.COMPLETE,onVideoLoadComplete, false, 0, true);			if (videoURL)				video.loadVideo(videoURL);			addChild(video);						video.player.addEventListener(UIEvent.PLAYBACK_START, onPlaybackStart, false, 0, true);			video.player.addEventListener(UIEvent.PLAYBACK_FINISH, onPlaybackFinish, false, 0, true);		}				public function onPlaybackStart(event:UIEvent):void		{			trace("Video Start: " + videoURL);			if (trackingEnabled)				ExternalInterface.call("pageTracker._trackPageview","/"+videoURL+"/play"); 		}				public function onPlaybackFinish(event:UIEvent):void		{			trace("Video Finish: " + videoURL);			if (trackingEnabled)				ExternalInterface.call("pageTracker._trackPageview","/"+videoURL+"/finish"); 		}				/** Repositions video to match actual width/height  */		public function onVideoLoadComplete(event:Event):void		{			this.x -= (video.width - BASE_WIDTH) / 2;			this.y -= (video.height - BASE_HEIGHT) / 2;			video.removeEventListener(Event.COMPLETE,onVideoLoadComplete);		}	}}