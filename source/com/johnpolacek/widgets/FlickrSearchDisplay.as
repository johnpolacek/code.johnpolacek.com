package com.johnpolacek.widgets {	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.Security;	import flash.text.TextField;	import flash.text.TextFormat;	import com.johnpolacek.components.GridGallery;	import com.greensock.TweenLite;	import com.greensock.easing.Expo;	import com.johnpolacek.components.LightboxContentInfo;			public class FlickrSearchDisplay extends GridGallery {				/** Array of urls for full size pics **/		public var pics = [];		/** Array of urls for thumbnail pics **/		public var thumbs = [];		/** Array of titles **/		public var titles = [];		/** Array of authors **/		public var authors = [];		private var numSearches:int = 0;		private var searchesLoaded:int = 0;				public function FlickrSearchDisplay(w:int, h:int = 0, s:int = 0)  		{			super(w,h,s);			Security.loadPolicyFile("http://static.flickr.com/crossdomain.xml");			Security.loadPolicyFile("http://farm1.static.flickr.com/crossdomain.xml");			Security.loadPolicyFile("http://farm2.static.flickr.com/crossdomain.xml");			Security.loadPolicyFile("http://farm3.static.flickr.com/crossdomain.xml");			Security.loadPolicyFile("http://farm4.static.flickr.com/crossdomain.xml");			Security.loadPolicyFile("http://farm5.static.flickr.com/crossdomain.xml");		}				public function search(...searchStrings)		{			numSearches = 0;			for (var i:int=0; i < searchStrings.length; i++) 			{				if (searchStrings[i] is String)				{					var searchString = "http://api.flickr.com/services/feeds/photos_public.gne?tags=";					searchString += searchStrings[i];					searchString += "&lang=en-us&format=rss_200";					loadXML(searchString);					numSearches++;				}				else				{					trace(searchString[i] + " must be a string");				}			}		}				private function loadXML(url:String) 		{			var loader:URLLoader = new URLLoader();			loader.addEventListener(Event.COMPLETE, XMLLoadComplete);			loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.load(new URLRequest(url));		}				private function XMLLoadComplete(event:Event):void 		{			var loader:URLLoader = URLLoader(event.target);			loader.removeEventListener(Event.COMPLETE, XMLLoadComplete);			loader.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			var feedXML:XML = XML(URLLoader(event.currentTarget).data);			var entries:XMLList = feedXML.*.item;			for (var i:int = 0; i < entries.length(); i++) 			{				var item:XML = feedXML..item[i];				if (String(item.child(9).@url)!="") {					thumbs.push(String(item.child(9).@url));					var picInfo:LightboxContentInfo = new LightboxContentInfo();					picInfo.url = String(item.child(7).@url);					picInfo.title = String(item.child(8));					picInfo.subtitle = String(item.child(10));					pics.push(picInfo);				} 			}			searchesLoaded++;			if (searchesLoaded == numSearches)  				onSearchComplete();		}				private function onSearchComplete():void		{			trace("FlickrSearchDisplay.onSearchComplete");			if (thumbs.length > 0)				build(thumbs, pics);		}				private function onIOError(event:IOErrorEvent):void {			trace("FlickrSearchDisplay.onIOError");			dispatchEvent(event);		}	}}