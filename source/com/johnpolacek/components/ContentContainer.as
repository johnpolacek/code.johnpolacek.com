package com.johnpolacek.components {		import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.events.TimerEvent;	import flash.net.navigateToURL;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.StyleSheet;	import flash.utils.Timer;	import com.johnpolacek.display.ContentDisplay;	import com.johnpolacek.display.ContentDisplayCreator;	import com.johnpolacek.display.ImageDisplay;	import com.johnpolacek.shapes.Line;	import com.johnpolacek.shapes.RectangleShape;	import com.johnpolacek.text.HTMLTextBlock;	/** * The ContentContainer class is designed for the loading and display  * of html-formatted content that is loaded from an xml formatted * document. XML conforms to the DocBook DTD. * * @example  * <br /> * <code> * // create ContentContainer that is 500 pixels wide * var container:ContentContainer = new ContentContainer(500); * // assign a filepath for all content being loaded * container.contentPath = "content/"; * // apply a style sheet to all HTMLTextBlocks * container.textStyleSheet = styleSheet; * // set 10 pixels vertical spacing between content elements * container.spacing = 10; * // set color for any horizontal rule lines * container.lineColor = 0x999999; * // loads xml file, parses it and then loads content * container.loadXML("content.xml"); * // add listener for when all content is loaded into the container * container.addEventListener(Event.COMPLETE, onContainerLoadComplete); * </code>  * For a good example of xml formatting for this class, refer to the  * <a href="http://code.johnpolacek.com/readingroom/index.html" target="_blank">ReadingRoom Demo</a> and its <a href="http://code.johnpolacek.com/readingroom/xml/content.xml" target="_blank">context.xml file</a>. * * @see com.johnpolacek.media.ContentPanel * @see com.johnpolacek.text.HTMLTextBlock * @version   * <b>02 May 2010</b> Added mediaobject element * <b>27 Apr 2010</b> * @author John Polacek, john@johnpolacek.com */	 	public class ContentContainer extends Sprite {				/**  Constant for title element tag **/		public static const ELEMENT_TAG_TITLE:String  = "title";		/**  Constant for text element tag **/		public static const ELEMENT_TAG_PARA:String  = "para";		/**  Constant for table element tag **/		public static const ELEMENT_TAG_TABLE:String  = "table";		/**  Constant for line element tag **/		public static const ELEMENT_TAG_HR:String  = "hr";		/**  Constant for mediaobject element tag **/		public static const ELEMENT_TAG_MEDIAOBJECT:String  = "mediaobject";						/** 		* Width of contentContainer		* Default: 550	**/		public var contentWidth:int = 550;		/** 		* Path to all the content files (jpg, flv, etc.) 		* Default: "content/"	**/		public var contentPath:String = "content/";		/** 		* StyleSheet that is applied to all html-formatted text		* Default: Empty StyleSheet (No styling) **/		public var textStyleSheet:StyleSheet = new StyleSheet();		/** 		* Sets the default spacing between elements.		* Default:	0 pixels **/		public var spacing:int = 0;		/** 		* Sets the color of any divider lines.		* Default:	0x000000 **/		public var lineColor:uint = 0x000000;		/** 		* Y position for the next element that is added **/		public var elementY:int = 0;				private var xml:XML;		private var elementsLoaded:int = 0;		private var totalElements:int;				/**  		* Parameter sets width of content block		**/		public function ContentContainer(w:int = 550) 		{			contentWidth = w;		}				/**  		* Loads xml, then loads content		* @param xml XML with CDATA containing the html for the content.		**/		public function loadXML(url:String):void		{			var loader:URLLoader = new URLLoader(); 			loader.addEventListener(IOErrorEvent.IO_ERROR, onXMLLoadError, false, 0, true);			loader.addEventListener(Event.COMPLETE, onXMLLoadComplete, false, 0, true);			// add random number query to end of url to clear cache			if (url.indexOf("?") == -1)				url +=  "?rand=" + Math.random();			loader.load(new URLRequest(url)); 		}				/** XML loader io error handler. **/		public function onXMLLoadError(event:IOErrorEvent):void		{			dispatchEvent(event);			event.target.removeEventListener(IOErrorEvent.IO_ERROR, onXMLLoadError, false, 0, true);			event.target.removeEventListener(Event.COMPLETE, onXMLLoadComplete, false, 0, true);		}				/** XML loader complete handler. **/		public function onXMLLoadComplete(event:Event):void		{			loadContentFromXML(XML(event.target.data));			event.target.removeEventListener(IOErrorEvent.IO_ERROR, onXMLLoadError);			event.target.removeEventListener(Event.COMPLETE, onXMLLoadComplete);		}					/**  		* Creates content elements from xml.		* @param xml XML with CDATA containing the html for the content. Default: null (No styling)		**/		public function loadContentFromXML(contentXML:XML):void		{			trace("ContentContainer.loadContentFromXML");			xml = contentXML;			totalElements = xml.*.length();			loadElement(0);		}					//--------------------------------------------------------------------------    //    //  Element Loading    //    //--------------------------------------------------------------------------				private function loadElement(i:int)		{			trace("ContentContainer.loadElement "+i);			var element:XML = XML(xml.*[i]);			var elementType:String = String(element.localName());						switch (elementType)			{				case ELEMENT_TAG_TITLE:				{					trace("Loading Section: "+element);					onElementComplete();					break;				}												case ELEMENT_TAG_PARA:				{					var elementText:String = element[0];					elementText = elementText.replace(/<img\ssrc="/g,'<img src="'+contentPath);					var paraWidth:int = contentWidth;					if (String(element.@width) != "")						paraWidth = element.@width;					var textBlock:HTMLTextBlock = new HTMLTextBlock(elementText, paraWidth, textStyleSheet);					trace("paraWidth: "+paraWidth);					textBlock.addEventListener(Event.COMPLETE, onElementComplete, false, 0, true);					textBlock.x += int(element.@offsetx);					elementY += int(element.@offsety);					addChild(textBlock);					break;				}							case ELEMENT_TAG_TABLE:				{					loadTable(element);					elementY += int(element.@offsety);					break;				}							case ELEMENT_TAG_HR:				{					var line:Line = new Line(contentWidth, 1, lineColor);					line.y = elementY - 1 + int(element.@offsety);					elementY += spacing;					addChild(line);					onElementComplete();					break;				}								case ELEMENT_TAG_MEDIAOBJECT:				{					var contentCreator:ContentDisplayCreator = new ContentDisplayCreator(); 					var elementURL:String = contentPath + element;					var mediaObject:ContentDisplay = contentCreator.create(elementURL);					mediaObject.addEventListener(Event.COMPLETE, onElementComplete, false, 0, true);					mediaObject.addEventListener(IOErrorEvent.IO_ERROR, onMediaIOError, false, 0, true);					addChild(mediaObject);					break;				}								default:				{					trace("Error: Element tag <"+elementType+"> is invalid at "+element);				}			}		}				private function onElementComplete(event:Event = null):void 		{			elementsLoaded++;						if (event)			{				event.target.removeEventListener(Event.COMPLETE, onElementComplete);				event.target.y = elementY;				elementY += event.target.height + spacing;				if (event.target is ContentDisplay)					elementY += 20;			}						if (elementsLoaded < totalElements)				loadElement(elementsLoaded);			else 				onContentLoadComplete();		}				private function loadTable(tableXML:XML):void		{			var tableSpacing:int = int(tableXML.@spacing);			var elementX:int = int(tableXML.@offsetx);			elementY += int(tableXML.@offsety);			var columnsLoaded:int = 0;			var totalColumns = tableXML.*.length();			var tableHeight:int = 0;						loadColumn(0);						function loadColumn(i:int):void			{				var column:Sprite = new Sprite();				var element:XML = XML(tableXML.*[i]);				var totalColumnElements:int = element.*.length();				var numColumnElementsLoaded:int = 0;				loadColumnElement(0);								function loadColumnElement(elementIndex:int):void				{					var elementText:String = element.*[elementIndex];					elementText = elementText.replace("<para>","");					elementText = elementText.replace("</para>","");					elementText = elementText.replace(/<img\ssrc="/g,'<img src="' + contentPath);					var textBlockWidth = int(element.@width);					var textBlock:HTMLTextBlock = new HTMLTextBlock(elementText, textBlockWidth, textStyleSheet);					textBlock.addEventListener(Event.COMPLETE, onColumnElementComplete);					textBlock.x += int(element.*[elementIndex].@offsetx);					textBlock.y = column.height + int(element.*[elementIndex].@offsety);					column.addChild(textBlock);					if (int(element.@width) > 0)						textBlock.textfield.width = element.@width;					}								function onColumnElementComplete(event:Event):void				{					numColumnElementsLoaded++;					if (numColumnElementsLoaded == totalColumnElements)						onColumnComplete(column);					else						loadColumnElement(numColumnElementsLoaded);				}			}						function onColumnComplete(column:Sprite):void			{				elementX += int(tableXML.*[columnsLoaded].@offsetx);				column.x = elementX;				column.y = elementY + int(tableXML.*[columnsLoaded].@offsety);				elementX += column.width + tableSpacing;				addChild(column);				columnsLoaded++;								if (column.height > tableHeight)					tableHeight = column.height;								if (columnsLoaded < totalColumns)				{					loadColumn(columnsLoaded);				}				else 				{					elementY += tableHeight + spacing;					onElementComplete();				}			}		}				private function onContentLoadComplete():void 		{			//small delay to allow listeners to register			var delay:Timer = new Timer(10, 1);			delay.addEventListener(TimerEvent.TIMER, sendComplete);			delay.start();						function sendComplete(event:TimerEvent):void 			{				delay.removeEventListener(TimerEvent.TIMER, sendComplete);				delay = null;				dispatchEvent(new Event(Event.COMPLETE)); 			}		}			//--------------------------------------------------------------------------    //    //  Event Handlers    //    //--------------------------------------------------------------------------				private function onMediaIOError(event:IOErrorEvent):void		{			trace("MediaObject url not found");			onElementComplete();		}	}}