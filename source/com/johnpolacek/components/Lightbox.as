package com.johnpolacek.components {	import com.greensock.TweenLite;	import com.greensock.easing.Back;	import com.greensock.easing.Expo;	import com.johnpolacek.animation.PreloadAnimationSquares;	import com.johnpolacek.components.LightboxContentInfo;	import com.johnpolacek.events.LightboxEvent;	import com.johnpolacek.shapes.RectangleShape;		import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.events.TimerEvent;	import flash.filters.BitmapFilter;	import flash.filters.BitmapFilterQuality;	import flash.filters.DropShadowFilter;	import flash.text.Font;	import flash.utils.Timer;	/** * The Lightbox class is used to show various media (video, images, audio)  * in a popup content window on the top level of a flash file. The lightbox * size is sized dynamically to match the size of the Stage. *  * Lightbox content can be shown individually or organized into groupings. *  * @example  * <br> * Basic usage, pass a content url to the lightbox: * <code>import com.johnpolacek.components.Lightbox; *  * var lightbox:Lightbox = new Lightbox(); * addChild(lightbox); * button.addEventListener(MouseEvent.CLICK, function():void { * 	lightbox2.displayContent("example.flv"); * }) * </code> *  * Example of content grouping <font color="0x999"> * <i>Note: Lightboxes can have multiple content groupings</i></font>:  * <code>lightbox.addContentToGroup("content/example.jpg"); * lightbox.addContentToGroup("content/example.flv"); * lightbox.addContentToGroup("content/example.mp3"); * button0.addEventListener(MouseEvent.CLICK, function():void { * 	lightbox.displayContentIndex(0); * }) * button1.addEventListener(MouseEvent.CLICK, function():void { * 	lightbox.displayContentIndex(1); * }) * button2.addEventListener(MouseEvent.CLICK, function():void { * 	lightbox.displayContentIndex(2); * }) * </code> *  * Example using LightboxFormat class to apply custom formatting and * the LightboxContentInfo class to add text fields and additional params:  * <code>import com.johnpolacek.components.Lightbox; * import com.johnpolacek.components.LightboxFormat; *  * var format:LightboxFormat = new LightboxFormat; * format.titleTextFormat = new TextFormat("Arial", 24, 0xF58220); * format.subtitleTextFormat = new TextFormat("Arial", 14, 0xFFFFFF); * format.noteTextFormat = new TextFormat("Arial", 12, 0xAAAAAA); * format.audioTitleTextFormat = new TextFormat("Arial", 14, 0xF58220); * format.audioSubtitleTextFormat = new TextFormat("Arial", 12, 0xFFFFFF); * format.buttonColor = 0xF58220; * format.contentBackgroundColor = 1; * format.margin = 20; * var lightbox:Lightbox = new Lightbox(format); * </code> * * Examples of different types of content: *  * <code>// AudioPlayer (single audio file)  * singleAudio:LightboxContentInfo = new LightboxContentInfo(); * singleAudio.titles = ["Audio Title"]; * singleAudio.subtitles = ["Audio Subtitle"]; * singleAudio.url = "content/sample1.mp3"; * singleAudio.title = "Sample Audio File";  * singleAudio.subtitle = "Must be mp3 format"; * singleAudio.note = "Every Kind Of Creep (Zebra remix) Mashup by ToTom"; * lightbox.addContentToGroup(singleAudio); *  * // AudioPlayerMenu (multiple audio files) * var multipleAudio:LightboxContentInfo = new LightboxContentInfo(); * var titles:Array = []; * var subtitles:Array = []; * titles.push("Every Kind Of Creep (Zebra remix) Mashup"); * titles.push("My Life on the Crazy Train Sucks (So What?)"); * titles.push("Pump Up the Doorbell"); * subtitles.push("by ToTom"); * subtitles.push("by byDanMei & MarcJonce"); * subtitles.push("by Party Ben"); * multipleAudio.titles = titles; * multipleAudio.subtitles = subtitles; * multipleAudio.url = "content/sample1.mp3,content/sample2.mp3,content/sample3.mp3"; * multipleAudio.title = "Sample Audio File"; * multipleAudio.subtitle = "Must be mp3 format"; * multipleAudio.note = "Mashups from bootiemashup.com",  * lightbox.addContentToGroup(multipleAudio); * * // AutoSlideShow * var slides:LightboxContentInfo = new LightboxContentInfo(); * slides.url = "content/cat1.jpg,content/cat2.jpg, content/cat3.jpg,content/cat4.jpg"; * slides.title = "Slideshow of images"; * slides.subtitle = "Can be jpg, gif or png"; * slides.note = "Image courtesy of icanhascheeseburger.com"; * lightbox.addContentToGroup(slides); *  * // SWF * // defining the width/height is sometimes necessary for proper display * var flashExample:LightboxContentInfo = new LightboxContentInfo(); * flashExample.flashWidth = 550; * flashExample.flashHeight = 420; * flashExample.url = "content/EaseVisualizer.swf"; * flashExample.title = "Sample Flash File",  * flashExample.subtitle = "GreenSock Ease Visualizer", * flashExample.note = "The GreenSock Tweening Platform rocks!", * lightbox.addContentToGroup(flashExample); * </code> * * @see com.johnpolacek.components.LightboxContentInfo * @see com.johnpolacek.components.LightboxFormat *  * @version  * <b>16 Apr 2010</b>  Improved error handling <br>  * <b>7 Apr 2010</b>  Redesigned next/prev buttons, added textfield for indexing current element <br>  * <b>7 Apr 2010</b>  LightboxWindow is autosized to the size of the Stage <br>  * <b>30 Mar 2010</b>  LightboxFormat now uses TextFormat objects for Lightbox TextFields <br>  * <b>29 Mar 2010</b>  ContentCreator class renamed ContentDisplayCreator, updated package structure <br> * <b>28 Mar 2010</b>  LightboxWindow stays centered for full screen lightboxes <br> * <b>27 Mar 2010</b>  Now uses LightboxContentInfo to manage properties of content <br> * <b>7 Mar 2010</b> <br> * @author John Polacek, john@johnpolacek.com */	 	public class Lightbox extends Sprite {				/**  		* Controls all formatting (colors, fonts, etc.)		* Default:	null (results in default formatting)  **/		public var format:LightboxFormat; 		/** An array that organizes content into groups. **/		public var contentGroups = [];		/** Default path to content directory. Default: "" **/		public var contentPath:String = "";		/** If running in projector mode (scaled full screen mode) then lightboxWindow position is adjusted. Defaault: 1 (no scaling) **/		public var projectorScale:Number = 1;				private var sizeToStage:Boolean = true;		private var lightboxWidth:int;		private var lightboxHeight:int;		private var lightboxBackground:Sprite;			private var lightboxWindow:LightboxWindow;		private var currContentGroup:int;		private var currContentIndex:int;		private var transitionStyle:String = LightboxWindow.TRANSITION_BUILD;		private var preloadAnimation:PreloadAnimationSquares;				public function Lightbox(f:LightboxFormat = null) 		{			this.visible = false;			format = f ? f : new LightboxFormat(); 			if (format.lightboxHeight != 0 && format.lightboxWidth != 0)			{				sizeToStage = false;				lightboxWidth = format.lightboxWidth;				lightboxHeight = format.lightboxHeight;			}			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true);			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage, false, 0, true);        }					//--------------------------------------------------------------------------    //    //  Public Methods    //    //--------------------------------------------------------------------------					/** Sets the width and height of the lightbox overlay background. **/		private function createBackground():void		{			if (sizeToStage)			{				lightboxWidth = stage.stageWidth;				lightboxHeight = stage.stageHeight;			}			lightboxBackground = new RectangleShape(lightboxWidth, lightboxHeight, format.backgroundColor, format.backgroundAlpha);			lightboxBackground.addEventListener(MouseEvent.CLICK, onContentClose, false, 0, true);			lightboxBackground.buttonMode = true;			if (!this.contains(lightboxBackground))			{				lightboxBackground.alpha = 0;				addChild(lightboxBackground);			}		}				/** Loads and displays content 		* 		* @param c Can be a string (url of media content), a LightboxContentInfo object or an array of strings/LightboxContentInfo objects		* @param resetContent If true, erase content group info. Default: true		**/		public function displayContent(c:*, resetContent:Boolean = true):void		{			trace("Lightbox.displayContent");			if (resetContent)			{				contentGroups = [];				currContentGroup = 0;				currContentIndex = 0;			}			var contentInfo:LightboxContentInfo = new LightboxContentInfo();			if (c is String)			{				// if c is a string that has a ";" separator, create contentInfoProps from it				// else use the value of c as the url for the content to be lightboxed				if (c.indexOf(";") !=-1)					contentInfo.createPropertiesFromString(c);				else					contentInfo.url = c;			}			else if (c is LightboxContentInfo)			{				contentInfo = c;			}			else if (c is Array)				{				if (c[0] is String)				{					var contentSelected:String = c.shift();				}				createContentGroupFromArray(c);				var cIndex:int = 0;				if (contentSelected)				{					cIndex = getContentIndex(contentSelected);					if (cIndex == -1)						cIndex = 0;				}				contentInfo = c[cIndex];			}			else			{				trace("ERROR: Invalid content format "+c+" - param must be either url string or LightboxContentInfo object");			}						if (contentInfo.url.indexOf(contentPath)==-1)			{				contentInfo.url = contentPath + contentInfo.url;				var commas:RegExp = /,/g;				contentInfo.url = contentInfo.url.replace(commas,","+contentPath);				var spaces:RegExp = /\s/g;				contentInfo.url = contentInfo.url.replace(spaces,"");			}						// Check for audio player text formatting info in the LightboxFormat class			if (format.audioTitleTextFormat != null)				contentInfo.audioTitleTextFormat = format.audioTitleTextFormat;			if (format.audioSubtitleTextFormat != null)				contentInfo.audioSubtitleTextFormat = format.audioSubtitleTextFormat;						if (lightboxWindow)				lightboxWindow.destroy();			lightboxWindow = new LightboxWindow(format);			lightboxWindow.displayContent(contentInfo);			setLightboxSize();						//display preload animation			preloadAnimation = new PreloadAnimationSquares();			preloadAnimation.x = lightboxWindow.x - (preloadAnimation.width/2);			preloadAnimation.y = lightboxWindow.y - (preloadAnimation.height/2);			addChild(preloadAnimation);			preloadAnimation.start();						lightboxWindow.addEventListener(Event.COMPLETE, onContentLoadComplete, false, 0, true);			lightboxWindow.addEventListener(Event.CLOSE, onContentClose, false, 0, true);			lightboxWindow.addEventListener(IOErrorEvent.IO_ERROR, onIOError, false, 0, true);			lightboxWindow.addEventListener(LightboxWindow.LIGHTBOX_PREV, onPrevClick, false, 0, true);			lightboxWindow.addEventListener(LightboxWindow.LIGHTBOX_NEXT, onNextClick, false, 0, true);						// set the current group and content index for content navigation			setContentIndex(contentInfo.url); 			addChild(lightboxWindow);						if (!this.visible) 				transitionIn();		}				/** Creates a new content group **/		public function addContentGroup():void		{			contentGroups.push([]);		}				/** 		* Adds content to a content group 		* @param c Can be a url string or a LightboxContentInfo object		* @param groupIndex If multiple content groups, targets the index. Default is 0		**/		public function addContentToGroup(c:*, groupIndex:int = 0):void		{			var contentInfo:LightboxContentInfo = new LightboxContentInfo();			if (c is String)				contentInfo.url = c;			else if (c is LightboxContentInfo)				contentInfo = c;			else				trace("ERROR: Invalid content format. Param must be either url string of LightboxContentInfo object");						if (contentGroups.length == 0) 				addContentGroup();						if (groupIndex < contentGroups.length)			{				var group:Array = contentGroups[groupIndex];				group.push(contentInfo);			}			else			{				trace("groupIndex out of bounds of contentGroups, max groupIndex="+contentGroups.length);			}		}				/** 		* Creates content group from array		* @param contentArray An array of content url's or LightboxContentInfo objects		**/		public function createContentGroupFromArray(contentArray:Array):void		{			trace("Lightbox.createContentGroupFromArray");			var l:int = contentArray.length;			for (var i:int = 0; i < l; i++)			{				addContentToGroup(contentArray[i]);			}		}				/**		* Displays content from a content group		* @param contentIndex Index of the content in the content group		* @param groupIndex If multiple groups, pass the index of the group with this param. Default is 0		*/		public function displayContentIndex(contentIndex:int, groupIndex:int = 0):void		{			if (groupIndex < contentGroups.length)			{				var contentInfo:LightboxContentInfo = LightboxContentInfo(contentGroups[groupIndex][contentIndex]);				displayContent(contentInfo, false);			}			else			{				trace("groupIndex out of bounds of contentGroups, max groupIndex="+contentGroups.length);				if (contentGroups.length == 0) trace("no content groups created");			}		}			//--------------------------------------------------------------------------    //    //  Content Management    //    //--------------------------------------------------------------------------				private function setContentIndex(contentURL:String):void		{			currContentGroup = -1;			currContentIndex = -1;			var n:int = contentGroups.length;			for (var i:int = 0; i < n; i++)			{				for (var j:int = 0; j < contentGroups[i].length; j++)				{					if (contentURL == contentGroups[i][j].url)					{						currContentGroup = i;						currContentIndex = j;					}				}			}			if (currContentIndex != -1  &&  currContentGroup != -1)			{				if (contentGroups[currContentGroup].length > 1)					lightboxWindow.setNavIndex(currContentIndex + 1, contentGroups[currContentGroup].length);			}		}				private function getContentIndex(contentURL:String):int		{			var index:int = -1;			var n:int = contentGroups.length;			for (var i:int = 0; i < n; i++)			{				for (var j:int = 0; j < contentGroups[i].length; j++)				{					if (contentURL == contentGroups[i][j].url)					{						index = j;					}				}			}			return index;		}			//--------------------------------------------------------------------------    //    //  Transitions    //    //--------------------------------------------------------------------------		private function transitionIn():void		{			this.visible = true;			this.alpha = 1;			lightboxBackground.alpha = 0;			TweenLite.to(lightboxBackground, .5, {alpha:format.backgroundAlpha});		}				/** Closes lightbox **/		public function close():void		{			trace("Lightbox.close");			lightboxWindow.transitionStyle = LightboxWindow.TRANSITION_BUILD;			lightboxWindow.close();			if (preloadAnimation)				destroyPreloader();			TweenLite.to(this, .75, {alpha:0, ease:Expo.easeIn, onComplete:transitionOutComplete});		}				private function transitionOutComplete():void		{			trace("Lightbox.transitionOutComplete");			this.visible = false;			destroyLightboxWindows();		}					private function destroyLightboxWindows():void		{			// Makes sure any lightbox windows are destroyed			for (var i:int = 0; i < this.numChildren; i++)			{				if (this.getChildAt(i) is LightboxWindow)				{					var window:LightboxWindow = this.getChildAt(i) as LightboxWindow					window.destroy();					window.removeEventListener(Event.COMPLETE, onContentLoadComplete);					window.removeEventListener(Event.CLOSE, onContentClose);					window.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);					window.removeEventListener(LightboxWindow.LIGHTBOX_PREV, onPrevClick);					window.removeEventListener(LightboxWindow.LIGHTBOX_NEXT, onNextClick);					window = null;				}			}		}				private function destroyPreloader():void		{			removeChild(preloadAnimation);			preloadAnimation = null;		}			//--------------------------------------------------------------------------    //    //  Event Handlers    //    //--------------------------------------------------------------------------				private function onContentLoadComplete(event:Event):void		{			trace("Lightbox.onContentLoadComplete");			if (preloadAnimation)				destroyPreloader();			dispatchEvent(new LightboxEvent(LightboxEvent.VIEW_CONTENT, lightboxWindow.contentInfo));		}				private function onNextClick(event:Event):void		{			transitionStyle = lightboxWindow.transitionStyle = LightboxWindow.TRANSITION_FLY_IN_RIGHT;			lightboxWindow.transitionOut();			var newIndex:int = currContentIndex + 1;			if (newIndex == contentGroups[currContentGroup].length) 				newIndex = 0;			displayContentIndex(newIndex, currContentGroup);		}				private function onPrevClick(event:Event):void		{			transitionStyle = lightboxWindow.transitionStyle = LightboxWindow.TRANSITION_FLY_IN_LEFT;			lightboxWindow.transitionOut();			var newIndex:int = currContentIndex - 1;			if (newIndex == -1) 				newIndex = contentGroups[currContentGroup].length-1;			displayContentIndex(newIndex, currContentGroup);		}				private function onContentClose(event:Event):void		{			close();		}				private function onAddedToStage(event:Event):void		{			if (stage.stageWidth != 0)			{				createBackground();				if (sizeToStage)					stage.addEventListener(Event.RESIZE, onStageResize);			}			else 			{				var stageChecker:Timer = new Timer(50, 0);				stageChecker.addEventListener(TimerEvent.TIMER, doStageCheck);				stageChecker.start();				function doStageCheck(event:TimerEvent):void				{					if (stage.stageWidth != 0)					{						createBackground();						if (sizeToStage)							stage.addEventListener(Event.RESIZE, onStageResize);						stageChecker.stop();						stageChecker.removeEventListener(TimerEvent.TIMER, onAddedToStage);					}				}			}		}				private function onRemovedFromStage(event:Event):void		{			if (sizeToStage)				stage.removeEventListener(Event.RESIZE, onStageResize);		}				private function onStageResize(event:Event):void		{			setLightboxSize();		}				private function setLightboxSize():void		{			if (lightboxWindow)			{				if (sizeToStage)				{					lightboxBackground.width = lightboxWidth = stage.stageWidth;					lightboxBackground.height = lightboxHeight = stage.stageHeight;				}				lightboxWindow.x = lightboxWidth / 2 * projectorScale;				lightboxWindow.y = lightboxHeight / 2 * projectorScale;				lightboxWindow.maxContentWidth = lightboxWidth - (format.margin * 3);				lightboxWindow.maxContentHeight = lightboxHeight - (format.margin * 3);			}		}				private function onIOError(event:IOErrorEvent):void		{			errorHandler("Lightbox IO Error, closing lightbox");			TweenLite.to(this, .75, {alpha:0, ease:Expo.easeIn, onComplete:transitionOutComplete});		}				private function errorHandler(errorString:String)		{			trace(errorString);		}	}}