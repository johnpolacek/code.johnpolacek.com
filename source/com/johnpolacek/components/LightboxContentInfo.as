package com.johnpolacek.components {	import flash.text.TextFormat;			 /** * The LightboxContentInfo class contains information for a  * single piece of content that is displayed by the Lightbox  * in the LightboxWindow. *  * * @version  * <b>07 May 2010</b>  Added createContentArrayFromString method for creating arrays of LightboxContentInfoObjects from specially coded strings <br> * <b>01 May 2010</b>  Created link, linkText and linkTextFormat properties for images with hyperlinks <br> * <b>27 Mar 2010</b> * @author John Polacek, john@johnpolacek.com */	 		public class LightboxContentInfo {				/** The url string for the content to be displayed.	**/		public var url:String = "";		/**  The text in the title TextField. Default:	""  **/		public var title:String = "";		/** The text in the subtitle TextField. Default:	""  **/		public var subtitle:String = "";		/** The text in the note TextField. Default:	""  **/		public var note:String = "";		/** The color of the content backgound. Default: 0xFFFFFF  **/		public var backgroundColor:uint = 0xFFFFFF;		/** (ImageDisplay only) A hyperlink to display in a new window on mouse click.	**/		public var link:String = "";		/** The TextFormat for the ImageDisplay link textfield.  **/		public var linkText:String = "";		/** The text that appears on top of the ImageDisplay indicating a link (i.e. Click to visit)  **/		public var linkTextFormat:TextFormat;		/** Width (in pixels) of the FlashDisplay. Default is 0 (auto sized) */		public var flashWidth:Number = 0;		/** Height (in pixels) of the FlashDisplay. Default is 0 (auto sized) */		public var flashHeight:Number = 0;					/** The alpha of flash content backgound. Default: 0  **/		public var flashBackgroundAlpha:Number = 0;		/** The color of flash content backgound. Default: 0xFFFFFF  **/		public var flashBackgroundColor:uint = 0xFFFFFF;		/** For audio content, an array of titles for each audio file. Default:	[]  **/		public var audioTitles = [];		/** For audio content, an array of subtitles for each audio file. Default:	[]  **/		public var audioSubtitles = [];		/** The TextFormat for the AudioDisplay title TextFields.  **/		public var audioTitleTextFormat:TextFormat;		/** The TextFormat for the AudioDisplay subtitle TextFields.  **/		public var audioSubtitleTextFormat:TextFormat;		/** Width (in pixels) of audio player. Default is 400 */		public var audioPlayerWidth:Number = 400;		/** Height (in pixels) of audio player (not inluding progress bar). Default is 50 */		public var audioPlayerHeight:Number = 50;		/** Color of audio player buttons. Default is 0xFFFFFF */		public var audioButtonColor:uint = 0xFFFFFF;		/** Audio player track color. Default is 0x666666 */		public var audioTrackColor:uint = 0x666666;		/** Audio player track alpha. Default is 1 */		public var audioTrackAlpha:Number = 1;		/** The color of the audio player backgound TextField. Default: 0x00000000  **/		public var audioBackgroundColor:uint = 0x000000;				/** @private */		public function LightboxContentInfo() 		{					}				/** 		* Returns an array of LightboxContentInfo objects from an encoded string. 		* The string should follow this format: {url:image.jpg;title:A title},{url:image2.jpg}		* Automatically strips out new lines and tabs.		* @param string The encoded string with property assignments. 		**/		public static function createContentArrayFromString(string:String):Array		{			trace("LightboxContentInfo.createContentArrayFromString");			var lightboxContentArray:Array = [];			var loopCount:int = 0;			var lightboxLink:String = string;			lightboxLink = lightboxLink.replace(new RegExp("\\t","g"),"");			lightboxLink = lightboxLink.replace(new RegExp("\\n","g"),"");						// loop through lightboxLink, getting the text between the braces			while (lightboxLink.indexOf("{") != -1  &&  loopCount < 100)			{				//trace("lightboxLink: "+lightboxLink);				var infoString:String = lightboxLink;				// infoString is the text between the brackets				infoString = infoString.slice(lightboxLink.indexOf("{")+1, lightboxLink.indexOf("}"));				var contentInfo:LightboxContentInfo = new LightboxContentInfo();				//trace("infoString: "+infoString);				contentInfo.createPropertiesFromString(infoString);				lightboxContentArray.push(contentInfo);				// slice off the part of the lightboxLink string that has been processed				lightboxLink = lightboxLink.slice(lightboxLink.indexOf("}")+1);				loopCount++; //stops loop at 100 iterations for bad string formatting			}			return lightboxContentArray;		}				public function createPropertiesFromString(infoString:String):void		{			// create an array of strings, each will create a property			var propStringArray:Array = infoString.split(";");			for each (var propString:String in propStringArray) 			{				// 1st half of the propString becomes the property name				var propName:String = propString.slice(0, propString.indexOf(":"));				// 2nd half of the propString becomes the property value				var prop:String = propString.slice(propString.indexOf(":")+1);				trace(propName+":"+prop);				if (propName == "audioTitle")				{					audioTitles.push(prop);				} 				else if (propName == "audioSubtitle")				{					audioSubtitles.push(prop);				}				else				{					try 					{						this[propName] = prop;					}					catch (error:ReferenceError)					{						trace("Invalid content info property: "+prop); // catches bad property names in infoString					}				}			}		}	}}