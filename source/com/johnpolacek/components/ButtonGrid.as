package com.johnpolacek.components {		import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import com.johnpolacek.components.ImageGrid;	import com.johnpolacek.ui.BasicButton;	import com.johnpolacek.events.UIEvent;	/** * Adds simple button interactivity to ImageGrid *  * @example  * <br /> * Create grid 4 images wide (images should be same size) * <code> * var grid:ButtonGrid = new ButtonGrid(4); * </code> *  * create grid 4 images wide x 3 images high * <code> * var grid:ButtonGrid = new ButtonGrid(4, 3); * </code> *  * create 4x3 grid, with 10 pixels spacing * <code> * var grid:ButtonGrid = new ButtonGrid(4, 3, 10); * </code> *  * create array of image url's * <code> * var images = ["img/image1.jpg","img/image2.jpg"...]; * grid.loadImages(images); * </code> * * Add event listener to the grid to detect which button gets clicked * <code> * grid.addEventListener(UIEvent.BUTTON_SELECT, onButtonSelect); * function onButtonSelect(event:UIEvent):void * { *    trace(event.value); // button index *    trace("You clicked button #" + (event.value+1)); * } * </code> *  * @see com.johnpolacek.components.ImageGrid * @version 7 Mar 2010 * @author John Polacek, john@johnpolacek.com */		public class ButtonGrid extends ImageGrid {				public var baseAlpha:Number = .8;		public var rolloverAlpha:Number = 1;				/** 		* @param w Sets grid width (number of images wide)		* @param h Sets grid height (number of images tall)		* @param s Sets grid spacing between sprites in pixels (default is 0)		*/			public function ButtonGrid(w:int, h:int = 0, s:int = 0) 		{			super(w,h,s);		}				/** Image load complete handler */			override public function onImageLoadComplete(event:Event):void		{			event.target.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			event.target.removeEventListener(Event.COMPLETE, onImageLoadComplete);			var button:BasicButton = new BasicButton("", true, baseAlpha, rolloverAlpha);			button.addChild(Sprite(event.target));			button.addEventListener(MouseEvent.CLICK, onImageClick, false, 0, true);			addImage(button);			imagesLoaded++;			if (imagesLoaded < urlsToLoad.length && yCount < gridHeight)				loadImage(urlsToLoad[imagesLoaded]);			else				urlsToLoad = [];		}				/** Image click handler. Dispatches UIEvent.BUTTON_SELECT Event */		public function onImageClick(event:MouseEvent):void		{			var buttonIndex:int = this.getChildIndex(Sprite(event.currentTarget));			dispatchEvent(new UIEvent(UIEvent.BUTTON_SELECT, buttonIndex, false));		}	}}