package com.johnpolacek.container{		import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.text.AntiAliasType;	import flash.text.Font;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import com.johnpolacek.shapes.RectangleGradientShape;/** * The ChromeContainer class is used to display sprites * inside a RectangleGradientShape *  * @example  * <br /> * Create a simple chrome button * * <code>import flash.text.TextField; * import flash.text.TextFieldAutoSize; * import com.johnpolacek.container.ChromeContainer; *  * var tf:TextField = new TextField(); * tf.autoSize = TextFieldAutoSize.LEFT; * tf.text = "Click Me!"; * var buttonGraphic:ChromeContainer = new ChromeContainer(); * buttonGraphic.paddingTop = buttonGraphic.paddingBottom = 5; * buttonGraphic.contain(tf); * addChild(buttonGraphic); * </code> *  * @version  * <b>10 Sep 2010</b><br/> * @author John Polacek, john@johnpolacek.com */	 		public class ChromeContainer extends Sprite {				// Stage Objects		private var chrome:Sprite;		private var container:Sprite;				// Properties		private var _padding:int = 10;		private var _paddingLeft:int = 10;		private var _paddingRight:int = 10;		private var _paddingTop:int = 10;		private var _paddingBottom:int = 10;		private var _fillColor1:uint = 0xFFFFFF;		private var _fillColor2:uint = 0xCCCCCC;		private var _fillAlpha1:Number = 1;		private var _fillAlpha2:Number = 1;		private var _strokeThickness:int = 2;		private var _strokeColor:uint = 0xCCCCCC;		private var _strokeAlpha:Number = 1;		private var _gradientRotation:Number = Math.PI/2;		private var _roundedCornerAmount = 12;		private var _alignToCenter:Boolean = false;				public function ChromeContainer()												{			chrome = new Sprite();			container = new Sprite();			addChild(chrome);			addChild(container);			container.mouseChildren = false;		}				public function contain(sprite:DisplayObject, spriteX:int = 0, spriteY:int = 0):void		{			// add sprite to container			container.addChild(sprite);			sprite.x = spriteX;			sprite.y = spriteY;						updateChrome();		}				private function updateChrome():void		{			if (container.numChildren > 0)			{				// clear chrome				while (chrome.numChildren > 0)				{					chrome.removeChildAt(0);				}								// add RectangleGradientShape				var chromeWidth:int = container.width + _paddingLeft + _paddingRight;				var chromeHeight:int = container.height + _paddingTop + _paddingBottom;				var chromeRect = new RectangleGradientShape (chromeWidth,															 chromeHeight, 															 fillColor1,															 fillColor2,															 fillAlpha1,															 fillAlpha2,															 strokeThickness,															 strokeColor,															 strokeAlpha,															 false,															 gradientRotation,															 roundedCornerAmount);				chrome.addChild(chromeRect);								// position chrome and container				if (alignToCenter)				{					chrome.x = -chrome.width/2;					chrome.y = -chrome.height/2;				}				container.x = chrome.x + _paddingLeft;				container.y = chrome.y + _paddingTop;			}		}		//--------------------------------------------------------------------------    //    //  Getters and Setters    //    //--------------------------------------------------------------------------					public function get padding():int 		{			return _padding;		}				public function set padding(value:int):void 		{			_padding = _paddingLeft= _paddingRight= _paddingTop = _paddingRight = value;			updateChrome();		}				public function get paddingLeft():int 		{			return _paddingLeft;		}				public function set paddingLeft(value:int):void 		{			_paddingLeft = value;			updateChrome();		}				public function get paddingRight():int 		{			return _paddingRight;		}				public function set paddingRight(value:int):void 		{			_paddingRight = value;			updateChrome();		}				public function get paddingTop():int 		{			return _paddingTop;		}				public function set paddingTop(value:int):void 		{			_paddingTop = value;			updateChrome();		}				public function get paddingBottom():int 		{			return _paddingBottom;		}				public function set paddingBottom(value:int):void 		{			_paddingBottom = value;			updateChrome();		}				public function get fillColor1():int 		{			return _fillColor1;		}				public function set fillColor1(value:int):void 		{			_fillColor1 = value;			updateChrome();		}				public function get fillColor2():int 		{			return _fillColor2;		}				public function set fillColor2(value:int):void 		{			_fillColor2 = value;			updateChrome();		}				public function get fillAlpha1():int 		{			return _fillAlpha1;		}				public function set fillAlpha1(value:int):void 		{			_fillAlpha1 = value;			updateChrome();		}				public function get fillAlpha2():int 		{			return _fillAlpha2;		}				public function set fillAlpha2(value:int):void 		{			_fillAlpha2 = value;			updateChrome();		}				public function get strokeThickness():int 		{			return _strokeThickness;		}				public function set strokeThickness(value:int):void 		{			_strokeThickness = value;			updateChrome();		}				public function get strokeColor():int 		{			return _strokeColor;		}				public function set strokeColor(value:int):void 		{			_strokeColor = value;			updateChrome();		}				public function get strokeAlpha():int 		{			return _strokeAlpha;		}				public function set strokeAlpha(value:int):void 		{			_strokeAlpha = value;			updateChrome();		}				public function get gradientRotation():int 		{			return _gradientRotation;		}				public function set gradientRotation(value:int):void 		{			_gradientRotation = value;			updateChrome();		}				public function get roundedCornerAmount():int 		{			return _roundedCornerAmount;		}				public function set roundedCornerAmount(value:int):void 		{			_roundedCornerAmount = value;			updateChrome();		}				public function get alignToCenter():Boolean		{			return _alignToCenter;		}				public function set alignToCenter(value:Boolean):void 		{			_alignToCenter = value;			updateChrome();		}	}}