package com.johnpolacek.application{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.BitmapDataChannel;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.StyleSheet;	import com.asual.SWFAddress;	import com.google.analytics.AnalyticsTracker; 	import com.google.analytics.GATracker;	import com.greensock.TweenLite;	import com.greensock.easing.Expo;	import com.johnpolacek.application.FullScreenSite;	import com.johnpolacek.application.SiteFormat;	import com.johnpolacek.components.ContentPanel;	import com.johnpolacek.components.ContentContainer;	import com.johnpolacek.components.Lightbox;	import com.johnpolacek.display.ContentDisplayCreator;	import com.johnpolacek.events.LightboxEvent;	import com.johnpolacek.events.UIEvent;	import com.johnpolacek.shapes.Line;	import com.johnpolacek.shapes.RectangleShape;	import com.johnpolacek.text.FontsLoader;	import com.johnpolacek.text.BasicTextBlock;	import com.johnpolacek.ui.BasicButtonMenu;	import com.johnpolacek.ui.FullScreenScrollbar;		 /** * An xml-based full-screen flash site template.  *  * @version  * <b>27 Apr 2010</b>  Now extends FullScreenSite <br>  * <b>20 Apr 2010</b>  Uses ContentPanel and ContentContainer components <br>  * <b>12 Apr 2010</b>  Added sidebar <br>  * <b>11 Apr 2010</b>  Updated content xml to conform to (mostly) DocBook markup <br>  * <b>4 Apr 2010 </b> * * @author John Polacek, john@johnpolacek.com */	 		public class ReadingRoom extends FullScreenSite	{						public var hasIntro:Boolean = false;		private var contentXML:XML;				public function ReadingRoom()		{			useSWFAddress = false;		}			//--------------------------------------------------------------------------    //    //  SEQUENCED LOADING    //    //--------------------------------------------------------------------------				/** Sets container position and size **/		override public function configureContainer():void		{			trace("ReadingRoom.configureContainer");			containerWidth = format.headerFormat.width + format.sectionFormat.width + format.sidebarFormat.width + format.margin * 2;			container.y = format.margin;		}				/** Load content after fonts load complete **/		override public function onRuntimeAssetsLoadComplete(event:Event = null):void		{			trace("ReadingRoom.onFontsLoadComplete");			loadContentXML("xml/content.xml" + "?rand=" + Math.random());		}				public function loadContentXML(url:String):void		{			var loader:URLLoader = new URLLoader(); 			loader.addEventListener(IOErrorEvent.IO_ERROR, onContentXMLLoadError);			loader.addEventListener(Event.COMPLETE, onContentXMLLoadComplete); 			loader.load(new URLRequest(url)); 		}				/** Content xml load error handler **/		public function onContentXMLLoadError(event:Event):void		{			trace("Could not load - content.xml could not be found.");		}				/** Actions initiated after content xml load is complete **/		public function onContentXMLLoadComplete(event:Event):void		{			trace("ReadingRoom.onContentXMLLoadComplete");			contentXML = new XML(event.target.data);			numSections = contentXML.part.*.length();			siteXML.title = contentXML.title;			SWFAddress.setTitle(siteXML.title);			createNav();			loadHeader();		}					//----------------------------------  		//  NAV    	//----------------------------------				/** Create navigation **/		override public function createNav():void		{			trace("ReadingRoom.createNav");			nav = new BasicButtonMenu();			nav.spacing = format.nav.spacing;			var sectionTitles = [];			for each (var sectionXML:XML in contentXML.part..article) 			{				sectionTitles.push(sectionXML.title);			}			for each (var sectionTitle:String in sectionTitles) 			{				var navButton:Sprite = createNavButton(sectionTitle);				nav.addButton(navButton);			}			nav.hideButtons();		}				/** Creates and retruns a sprite for a single nav button instance **/		override public function createNavButton(buttonText:String):Sprite		{			var btn:Sprite = new Sprite();			var tb:BasicTextBlock = new BasicTextBlock(buttonText,													   format.nav.buttonWidth,													   format.nav.textFormat,													   format.nav.x,													   format.nav.y);			btn.addChild(tb);								if (format.nav.lines)			{								var topline:Line = new Line(format.nav.buttonWidth, 											1, 											format.nav.lines.color, 											format.nav.lines.alpha);				btn.addChild(topline);				var bottomline:Line = new Line(format.nav.buttonWidth, 											   1, 											   format.nav.lines.color, 											   format.nav.lines.alpha);				bottomline.y = tb.height + format.nav.y + format.nav.lines.spacing + format.nav.lines.adjustY;				btn.addChild(bottomline);			}			return btn;		}				//----------------------------------  		//  HEADER / MASTHEAD    	//----------------------------------				/** Loads header ContentPanel **/		override public function loadHeader():void		{			trace("ReadingRoom.loadHeader");			header = new ContentPanel();			header.styleSheet = format.textStyleSheet;			header.contentPath = format.contentPath;			header.setFormat(format.headerFormat);			if (String(contentXML.preface.section.(@label=="masthead")) != "")				loadMasthead();			else				onHeaderLoadComplete();		}				/** Loads optional masthead **/		override public function loadMasthead():void		{			trace("ReadingRoom.loadMasthead");			var mastheadXML:XML = XML(contentXML.preface.section.(@label=="masthead"));			var masthead:ContentContainer = new ContentContainer(format.headerFormat.width);			masthead.contentPath = format.contentPath;			masthead.textStyleSheet = format.textStyleSheet;			masthead.loadContentFromXML(mastheadXML);			masthead.addEventListener(Event.COMPLETE, onMastheadComplete);			masthead.addEventListener(MouseEvent.MOUSE_DOWN, onMastheadClick);			masthead.buttonMode = true;			masthead.mouseChildren = false;		}				/** Masthead complete handler **/		override public function onMastheadComplete(event:Event = null):void		{			trace("ReadingRoom.onMastheadComplete");			if (event)				header.addElement(ContentContainer(event.target));			onHeaderLoadComplete();			}					/** Actions initiated after header load is complete **/		override public function onHeaderLoadComplete(event:Event = null):void		{			trace("ReadingRoom.onHeaderLoadComplete");			container.addChild(header);			transitionHeaderIn();			header.addElement(nav);			addSectionContainer();			onStageResize(null);			loadSection(0);			hasIntro = Boolean(String(contentXML.part.partintro) != "");		}				//----------------------------------  		//  CONTENT CONTAINER    	//----------------------------------				/** Adds content container **/		override public function addSectionContainer():void		{			trace("ReadingRoom.addSectionContainer");			sectionContainer.x = format.headerFormat.width;			container.addChild(sectionContainer);		}				//----------------------------------  		//  CONTENT    	//----------------------------------				/** Loads section 		*	@param sectionIndex Section index to load		**/		override public function loadSection(sectionIndex:int = 0):void		{			trace("ReadingRoom.loadSection");			var section:ContentPanel = new ContentPanel();			section.styleSheet = format.textStyleSheet;			section.contentPath = format.contentPath;			section.setFormat(format.sectionFormat);			section.addElementFromXML(XML(contentXML.part.*[sectionIndex]));			section.addEventListener(Event.COMPLETE, onSectionLoadComplete);			section.y = sectionContainer.height;			if (sectionContainer.numChildren > 0) section.y += format.margin;		}				/** Actions initiated after header load is complete **/		override public function onSectionLoadComplete(event:Event):void		{			trace("ReadingRoom.onSectionLoadComplete");			sectionContainer.addChild(ContentPanel(event.target));			var sectionButtonIndex:int = sectionsLoaded;			if (contentXML.part.hasOwnProperty("partintro"))				sectionButtonIndex--;							if (sectionButtonIndex > -1)				nav.showButton(sectionButtonIndex);						sectionsLoaded++;						if (sectionsLoaded == 1)				TweenLite.from(sectionContainer, 1.5, { y:stage.stageHeight, alpha:0, ease:Expo.easeInOut });						trace("Loaded "+sectionsLoaded+"/" + numSections);			if (sectionsLoaded < numSections)			{				loadSection(sectionsLoaded);			}			else			{				loadSidebar();			}		}				//----------------------------------  		//  SIDEBAR    	//----------------------------------				/** Loads optional sidebar **/		override public function loadSidebar():void		{			trace("ReadingRoom.loadSidebar");			if (contentXML.preface.sidebar)			{				sidebar = new ContentPanel();				sidebar.styleSheet = format.textStyleSheet;				sidebar.contentPath = format.contentPath;				sidebar.setFormat(format.sidebarFormat);				sidebar.addElementFromXML(XML(contentXML.preface.sidebar));				sidebar.addEventListener(Event.COMPLETE, onSidebarLoadComplete);			}			else			{				onSidebarLoadComplete();			}		}				/** Actions initiated after sidebar load is complete **/		override public function onSidebarLoadComplete(event:Event = null):void		{			trace("ReadingRoom.onSidebarLoadComplete");			if (event)			{				container.addChild(sidebar);				sidebar.x = containerWidth - sidebar.width - format.margin;				TweenLite.from(sidebar, .5, {alpha:0, x:sidebar.x + sidebar.width, ease:Expo.easeOut});			}			loadFooter();		}				//----------------------------------  		//  FOOTER    	//----------------------------------				/** Loads optional sidebar **/		override public function loadFooter():void		{			trace("ReadingRoom.loadFooter");			if (contentXML.preface.section.(@label=="footer").length() > 0)			{				footer = new ContentPanel();				footer.styleSheet = format.textStyleSheet;				footer.contentPath = format.contentPath;				footer.setFormat(format.footerFormat);				footer.addElementFromXML(XML(contentXML.preface.section.(@label=="footer")));				footer.addEventListener(Event.COMPLETE, onFooterLoadComplete);			}			else			{				onFooterLoadComplete();			}		}				/** Actions initiated after footer load is complete **/		override public function onFooterLoadComplete(event:Event = null):void		{			trace("ReadingRoom.onFooterLoadComplete");			if (event)			{				footer.y = header.height - footer.height;				header.addChild(footer);				TweenLite.from(footer, .5, {alpha:0});			}			onSiteLoadComplete();		}			//--------------------------------------------------------------------------    //    //  EVENT MANAGEMENT    //    //--------------------------------------------------------------------------				/** Actions initiated when nav button is clicked **/		override public function onButtonSelect(event:UIEvent):void		{			var sectionIndex:int = event.value;			if (hasIntro) 				sectionIndex++;			if (sectionIndex == -1) 				sectionIndex = 0;			changeSection(sectionIndex);		}				/** Actions initiated when masthead is clicked **/		override public function onMastheadClick(event:MouseEvent):void		{			changeSection(0);		}				/** Change section 		*	@param newSection Index of new section **/		override public function changeSection(newSection:int):void		{			trace("ReadingRoom.changeSection");			var section:DisplayObject = sectionContainer.getChildAt(newSection);			var maxScroll:Number = sectionContainer.height - header.height - header.y;			scrollbar.doScroll(section.y/maxScroll);		}				/** Scrolls content **/		override public function onScroll(event:UIEvent):void		{			scrollbar.clickPercent = (stage.stageHeight / sectionContainer.height) * .5;			var maxScroll:Number = sectionContainer.height - header.height - header.y;			var newY:Number = -(maxScroll * scrollbar.percent);			TweenLite.to(sectionContainer, .5, {y:newY, ease:Expo.easeOut, onComplete:onScrollComplete});		}				/** Actions initiated when scroll is complete **/		public function onScrollComplete():void		{			var maxScroll:Number = sectionContainer.height - header.height - header.y;			var containerPosition:int = -sectionContainer.y;			var currSection:int = 0;			for (var i:int = 0; i < numSections; i++)			{				var sectionY = sectionContainer.getChildAt(i).y - header.height/2;				if (containerPosition > sectionY)					currSection = i;			}			track("Section View", contentXML.part.*[currSection].title);		}				/** Stage resizing manager **/		override public function onStageResize(event:Event = null):void		{			if (stage.stageWidth > containerWidth + format.margin) 				container.x = (stage.stageWidth -  containerWidth + format.margin) / 2;			else 				container.x = format.margin;						if (scrollbar) 				scrollbar.x = stage.stageWidth - scrollbar.width;							scaleBackgroundToStage();		}	}}