package com.johnpolacek.application{	import com.asual.SWFAddress;	import com.asual.SWFAddressEvent;	import com.google.analytics.AnalyticsTracker;	import com.google.analytics.GATracker;	import com.greensock.TweenLite;	import com.greensock.easing.Expo;	import com.johnpolacek.components.ContentContainer;	import com.johnpolacek.components.ContentPanel;	import com.johnpolacek.components.Lightbox;	import com.johnpolacek.components.LightboxContentInfo;	import com.johnpolacek.display.ContentDisplayCreator;	import com.johnpolacek.events.LightboxEvent;	import com.johnpolacek.events.UIEvent;	import com.johnpolacek.shapes.BitmapNoiseRectangle;	import com.johnpolacek.shapes.Line;	import com.johnpolacek.shapes.RectangleShape;	import com.johnpolacek.text.BasicTextBlock;	import com.johnpolacek.text.FontsLoader;	import com.johnpolacek.ui.BasicButton;	import com.johnpolacek.ui.BasicButtonMenu;	import com.johnpolacek.ui.FullScreenScrollbar;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.BitmapDataChannel;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.StyleSheet;		 /** * An xml-based full-screen fixed two-column flash site template. *  * @version  * <b>27 Apr 2010</b>  <br>  * * @author John Polacek, john@johnpolacek.com */	 		public class FullScreenSite extends MovieClip	{				/** Background sprite (can be a color or an external image file **/		public var background:Sprite = new Sprite();		/** Container for all display objects above the background **/		public var container:Sprite = new Sprite();		/** Navigation button menu **/		public var nav:BasicButtonMenu;		/** Contains content for header **/		public var header:ContentPanel;		/** Contains content for sidebar **/		public var sidebar:ContentPanel;		/** Contains content for footer **/		public var footer:ContentPanel;		/** Contains content for masthead **/		public var masthead:ContentContainer;		/** Contains dynamically loaded section content **/		public var sectionContainer:Sprite = new Sprite();		/** Scrollbar for container sprite **/		public var scrollbar:FullScreenScrollbar;		/** Lightbox for linked assets **/		public var lightbox:Lightbox;				// formatting		/** XML file for site **/		public var siteXML:XML;		/** Format object for site **/		public var format:SiteFormat;		/** Width of the container sprite **/		public var containerWidth:int;				// content		/** Content creator object **/		public var contentCreator = new ContentDisplayCreator();		/** Number of sections in the site **/		public var numSections:int;		/** Number of sections loaded **/		public var sectionsLoaded:int = 0;		/** Current section loaded **/		public var currSectionIndex:int = 0;		/** Flag for when load of site is complete **/		public var siteLoadCompleted:Boolean = false;				// tracking		/** Google Analytics tracker **/		public var tracker:AnalyticsTracker;		/** Tracking code for Google Analytics tracker **/		public var trackingCode:String;		/** Category field assigned to all tracking calls  **/		public var trackingCategory:String;		/** If true, uses swfaddress javascript for site navigation **/		public var useSWFAddress:Boolean = true;						public static const SECTION_TYPE_BLOG:String = "blog";						private var contentSelect:String = "";				public function FullScreenSite()		{			init();		}			//----------------------------------  	//  SWFADDRESS   	//----------------------------------				/** SWFAddress change handler **/		public function onSWFAddressChange(event:SWFAddressEvent):void		{			trace("FullScreenSite.onSWFAddressChange "+event.value);			var addressID = event.value.substring(1);			if (String(siteXML.sections.section.(@id==addressID)) != "")				currSectionIndex = siteXML.sections.section.(@id==addressID).childIndex();			else				currSectionIndex = 0;						var titleString:String = siteXML.title;			if (String(siteXML.sections.section[currSectionIndex].@title) != "")				titleString += " | " + siteXML.sections.section[currSectionIndex].@title			SWFAddress.setTitle(titleString);			loadSection(currSectionIndex);		}			//--------------------------------------------------------------------------    //    //  SEQUENCED LOADING / BUILDING    //    //--------------------------------------------------------------------------				/** Set initial params and add top-level display objects/event listeners **/		public function init():void		{			trace("FullScreenSite.init");			addChild(background);			addChild(container);						stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.addEventListener(Event.RESIZE, onStageResize);									addEventListener(UIEvent.BUTTON_SELECT, onButtonSelect);						loadSiteXML("xml/site.xml");		}				//----------------------------------  		//  SITE XML    	//----------------------------------				/** Loads main site xml file which contains all site configuration settings. **/		public function loadSiteXML(url:String):void		{			trace("FullScreenSite.loadSiteXML");			var loader:URLLoader = new URLLoader(); 			loader.addEventListener(IOErrorEvent.IO_ERROR, onSiteXMLLoadError);			loader.addEventListener(Event.COMPLETE, onSiteXMLLoadComplete);			// add random number query to end of url to clear cache			loader.load(new URLRequest(url + "?rand=" + Math.random())); 		}				/** Site XML load error handler **/		public function onSiteXMLLoadError(event:IOErrorEvent):void		{			errorHandler("site.xml file could not be found. Site could not be loaded");		}				/** After site xml loads, initiates next action **/		public function onSiteXMLLoadComplete(event:Event):void		{			trace("FullScreenSite.onSiteXMLLoadComplete");			event.target.removeEventListener(IOErrorEvent.IO_ERROR, onSiteXMLLoadError);			event.target.removeEventListener(Event.COMPLETE, onSiteXMLLoadComplete);			siteXML = XML(event.target.data);			setFormatFromXML();					loadBackground();		}				/** Applies formatting from site xml. **/		public function setFormatFromXML():void		{			trace("FullScreenSite.setFormatFromXML");			format = new SiteFormat(siteXML);					// apply formatting to properties			contentCreator.contentPath = format.contentPath;			configureContainer();									// tracking			if (String(siteXML.tracking.code)!="")			{				trackingCode = String(siteXML.tracking.code);				trackingCategory = String(siteXML.tracking.category);				initTracking();			}		}				/** Sets container position and size **/		public function configureContainer():void		{			trace("FullScreenSite.configureContainer");			containerWidth = format.headerFormat.width + (format.margin * 2);			container.y = format.margin;		}				//----------------------------------  		//  BACKGROUND    	//----------------------------------				/** Creates site background **/		public function loadBackground():void		{			trace("FullScreenSite.loadBackground");			var backgroundGraphic:Sprite;			if (format.background.lastIndexOf(".") == -1)			{				// background is a color				backgroundGraphic = new RectangleShape(1300, 1300, uint(format.background));				onBackgroundComplete();			}						else			{				// background is an image				backgroundGraphic = contentCreator.create(format.background);				backgroundGraphic.addEventListener(Event.COMPLETE, onBackgroundComplete);			}			background.addChild(backgroundGraphic);		}				/** Actions initiated after background complete **/		public function onBackgroundComplete(event:Event = null):void		{			trace("FullScreenSite.onBackgroundComplete");			if (event)				event.target.removeEventListener(Event.COMPLETE, onBackgroundComplete);			scaleBackgroundToStage();			TweenLite.from(background, .5, {alpha:0});			loadCSS();		}				//----------------------------------  		//  FONTS    	//----------------------------------				/** Loads css  **/		public function loadCSS():void		{			var loader:URLLoader = new URLLoader(); 			loader.addEventListener(IOErrorEvent.IO_ERROR, onCSSLoadError);			loader.addEventListener(Event.COMPLETE, onCSSLoadComplete); 			loader.load(new URLRequest("css/styles.css")); 		}				/** CSS load error handler **/		public function onCSSLoadError(event:IOErrorEvent):void		{			event.target.removeEventListener(IOErrorEvent.IO_ERROR, onCSSLoadError);			event.target.removeEventListener(Event.COMPLETE, onCSSLoadComplete); 			errorHandler("styles.css not found. \n Default styling will be used. Embedded fonts will not appear.");			onFontsLoadComplete(null);		}				/** After CSS load completes, load runtime fonts **/		public function onCSSLoadComplete(event:Event):void		{			trace("FullScreenSite.onCSSLoadComplete");			event.target.removeEventListener(IOErrorEvent.IO_ERROR, onCSSLoadError);			event.target.removeEventListener(Event.COMPLETE, onCSSLoadComplete); 			format.textStyleSheet = new StyleSheet();    		format.textStyleSheet.parseCSS(event.target.data);			if (format.fonts.length > 0)				loadFonts(format.fonts);			else 				onFontsLoadComplete(null);		}				/** Loads runtime fonts **/		public function loadFonts(fontsArray:Array):void		{			trace("FullScreenSite.loadFonts "+fontsArray);			var loader:FontsLoader = new FontsLoader();			loader.addEventListener(Event.COMPLETE, onFontsLoadComplete);			loader.loadFonts(fontsArray);					}				/** Load first content section after fonts load complete **/		public function onFontsLoadComplete(event:Event):void		{			trace("FullScreenSite.onFontsLoadComplete");			event.target.removeEventListener(Event.COMPLETE, onFontsLoadComplete);			loadRuntimeAssets();		}				/** Loads runtime assets from runtime.swf (if it exists) **/		private function loadRuntimeAssets():void		{			trace("FullScreenSite.loadRuntimeAssets");			var loader:Loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onRuntimeAssetsLoadComplete);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onRuntimeAssetsLoadError);			loader.load(new URLRequest("runtime.swf"));		}				/** Catches load error is runtime.swf does not exist **/		public function onRuntimeAssetsLoadError(event:IOErrorEvent):void		{			trace("No runtime assets to load: runtime.swf not found");			onRuntimeAssetsLoadComplete();		}				/** Load complete handler for runtime.swf **/		public function onRuntimeAssetsLoadComplete(event:Event = null):void		{			trace("FullScreenSite.onRuntimeAssetsLoaded");			if (event)			{				event.target.removeEventListener(Event.COMPLETE, onRuntimeAssetsLoadComplete);				event.target.removeEventListener(IOErrorEvent.IO_ERROR, onRuntimeAssetsLoadError);			}			loadMasthead();		}				//----------------------------------  		//  MASTHEAD    	//----------------------------------				/** Loads masthead **/		public function loadMasthead():void		{			trace("FullScreenSite.loadMasthead");			masthead = new ContentContainer(format.headerFormat.width - format.headerFormat.marginLeft - format.headerFormat.marginRight);			masthead.textStyleSheet = format.textStyleSheet;			masthead.contentPath = format.contentPath;			masthead.loadXML("xml/masthead.xml");			masthead.addEventListener(Event.COMPLETE, onMastheadComplete);			masthead.addEventListener(IOErrorEvent.IO_ERROR, onMastheadXMLLoadError);		}				/** Masthead xml io error handler **/		public function onMastheadXMLLoadError(event:IOErrorEvent):void		{			trace("Masthead could not be loaded.");			onMastheadComplete();		}					/** Masthead complete handler **/		public function onMastheadComplete(event:Event = null):void		{			trace("FullScreenSite.onMastheadComplete");			masthead.removeEventListener(Event.COMPLETE, onMastheadComplete);			masthead.removeEventListener(IOErrorEvent.IO_ERROR, onMastheadXMLLoadError);			loadHeader();		}				//----------------------------------  		//  HEADER    	//----------------------------------				/** Loads header ContentPanel **/		public function loadHeader():void		{			trace("FullScreenSite.loadHeader");			header = new ContentPanel();			header.styleSheet = format.textStyleSheet;			header.contentPath = format.contentPath;			header.setFormat(format.headerFormat);			if (masthead)				header.addElement(masthead);			header.loadElementFromXML("xml/header.xml");			header.addEventListener(IOErrorEvent.IO_ERROR, onHeaderError);			header.addEventListener(Event.COMPLETE, onHeaderLoadComplete);		}				/** Header complete handler **/		public function onHeaderError(event:Event = null):void		{			trace("No Header")			while(header.numChildren > 0)				header.removeChildAt(0);			onHeaderLoadComplete();		}				/** Header complete handler **/		public function onHeaderLoadComplete(event:Event = null):void		{			trace("FullScreenSite.onHeaderComplete");			header.removeEventListener(IOErrorEvent.IO_ERROR, onHeaderError);			header.removeEventListener(Event.COMPLETE, onHeaderLoadComplete);			if (header.numChildren > 0)			{				container.addChild(header);				transitionHeaderIn();			}			createNav();			addSectionContainer();			centerContainer();		}				//----------------------------------  		//  NAVIGATION    	//----------------------------------				/** Create navigation **/		public function createNav():void		{			trace("FullScreenSite.createNav");						// Set BasicButtonMenu properties			nav = new BasicButtonMenu();			nav.isVertical = false;			nav.spacing = format.nav.spacing;			nav.buttonAlpha = format.nav.alpha;			nav.rolloverColor = format.nav.rolloverColor;			nav.selectColor = format.nav.selectColor;						// Set section titles			var sectionTitles = [];			for each (var sectionXML:XML in siteXML.sections.section) 			{				sectionTitles.push(sectionXML.@title);			}						// Create nav buttons			for each (var sectionTitle:String in sectionTitles) 			{				var navButton:Sprite = createNavButton(sectionTitle);				nav.addButton(navButton);			}						// Set margin + indent			var navMargin:int = int(siteXML.nav.margin);			var navIndent:int = int(siteXML.nav.indent);			for (var i:int = 0; i < nav.numChildren; i++)			{				nav.getChildAt(i).y += navMargin;				nav.getChildAt(i).x += navIndent;			}						// Set background			var navBackground:Sprite;			navBackground = new RectangleShape(header.width, nav.height + (navMargin * 2), uint(siteXML.nav.background.color), int(siteXML.nav.background.alpha));			nav.addChildAt(navBackground, 0);			if (int(siteXML.nav.background.noise)!= 0)			{				var navBackgroundNoise:BitmapNoiseRectangle = new BitmapNoiseRectangle(navBackground.width, navBackground.height, siteXML.nav.background.noise);				navBackground.addChild(navBackgroundNoise);			}			transitionNavIn();		}				/** Creates and retruns a sprite for a single nav button instance **/		public function createNavButton(buttonText:String):Sprite		{			trace("navButton: "+buttonText);			var btn:Sprite = new Sprite();			var tb:BasicTextBlock = new BasicTextBlock(buttonText, 											 0, 											 format.nav.textFormat,											 format.nav.x, 											 format.nav.y);			btn.addChild(tb);			return btn;		}				/** Actions initiated when nav button is clicked **/		public function onButtonSelect(event:UIEvent):void		{			var sectionIndex:int = event.value;			changeSection(sectionIndex);		}				/** Actions initiated when masthead is clicked **/		public function onMastheadClick(event:MouseEvent):void		{			changeSection(0);		}				//----------------------------------  		//  CONTENT    	//----------------------------------				/** Adds content container **/		public function addSectionContainer():void		{			trace("FullScreenSite.addSectionContainer");			sectionContainer.y = nav.y + nav.height;			container.addChild(sectionContainer);			if (useSWFAddress)				SWFAddress.addEventListener(SWFAddressEvent.CHANGE, onSWFAddressChange);			else				changeSection(0);		}				/** Changes section, either through swfaddress or loadSection directly		*	@param sectionIndex Section index to load		**/		public function changeSection(sectionIndex:int):void		{			trace("FullScreenSite.changeSection to sectionIndex:"+sectionIndex+" section ID:"+siteXML.sections.section[sectionIndex].@id);			if (sectionContainer.numChildren > 0)				transitionSectionOut(sectionContainer.getChildAt(0));			if (useSWFAddress)				SWFAddress.setValue(siteXML.sections.section[sectionIndex].@id);			else				loadSection(sectionIndex);		}				/** Loads section 		*	@param sectionIndex Section index to load		**/		public function loadSection(sectionIndex:int = 0):void		{			track("Section Load", siteXML.sections.section[sectionIndex].@title);						var section:ContentPanel = new ContentPanel();			section.styleSheet = format.textStyleSheet;			section.contentPath = format.contentPath;			section.setFormat(format.sectionFormat);			section.loadElementFromXML("xml/"+siteXML.sections.section[sectionIndex]);			section.addEventListener(Event.COMPLETE, onSectionLoadComplete);			section.visible = false;			// NOTE: Number of buttons must equal number of sections			if (nav.currButtonIndex != sectionIndex)				nav.selectButton(sectionIndex);		}				/** Actions initiated after section load is complete **/		public function onSectionLoadComplete(event:Event):void		{			trace("FullScreenSite.onSectionLoadComplete");			event.target.removeEventListener(Event.COMPLETE, onSectionLoadComplete);			if (!siteLoadCompleted)			{				// if first load, call sectionContainerLoadComplete				onSectionContainerLoadComplete();			}			var newSection:ContentPanel = ContentPanel(event.target);			sectionContainer.addChild(newSection);			transitionSectionIn(newSection);			if  (scrollbar)			{				if (scrollbar.percent > 0)					scrollbar.doScroll(0);			}		}				/** Actions initiated after first section has loaded **/		public function onSectionContainerLoadComplete(event:Event = null):void		{			trace("FullScreenSite.onSectionContainerLoadComplete");			loadSidebar();		}				//----------------------------------  		//  SIDEBAR    	//----------------------------------				/** Loads sidebar **/		public function loadSidebar():void		{			trace("FullScreenSite.loadSidebar");			sidebar = new ContentPanel();			sidebar.styleSheet = format.textStyleSheet;			sidebar.contentPath = format.contentPath;			sidebar.setFormat(format.sidebarFormat);			sidebar.loadElementFromXML("xml/sidebar.xml");			sidebar.addEventListener(Event.COMPLETE, onSidebarLoadComplete);			sidebar.addEventListener(IOErrorEvent.IO_ERROR, onSidebarLoadError);		}				/** Sidebar load error handler **/		public function onSidebarLoadError(event:IOErrorEvent):void		{			errorHandler("sidebar.xml not found. \n No sidebar is created.");			onSidebarLoadComplete();		}				/** Actions initiated after sidebar load is complete **/		public function onSidebarLoadComplete(event:Event = null):void		{			trace("FullScreenSite.onSidebarLoadComplete");			sidebar.removeEventListener(Event.COMPLETE, onSidebarLoadComplete);			sidebar.removeEventListener(IOErrorEvent.IO_ERROR, onSidebarLoadError);			if (event)			{				transitionSidebarIn();			}			loadFooter();		}				//----------------------------------  		//  FOOTER    	//----------------------------------				/** Loads footer **/		public function loadFooter():void		{			trace("FullScreenSite.loadFooter");			footer = new ContentPanel();			footer.styleSheet = format.textStyleSheet;			footer.contentPath = format.contentPath;			footer.setFormat(format.footerFormat);			footer.loadElementFromXML("xml/footer.xml");			footer.addEventListener(Event.COMPLETE, onFooterLoadComplete);			footer.addEventListener(IOErrorEvent.IO_ERROR, onFooterLoadError);		}				/** Footer load error handler **/		public function onFooterLoadError(event:IOErrorEvent):void		{			errorHandler("footer.xml not found. \n No footer is created.");			onFooterLoadComplete();		}				/** Actions initiated after footer load is complete **/		public function onFooterLoadComplete(event:Event = null):void		{			trace("FullScreenSite.onFooterLoadComplete");			footer.removeEventListener(Event.COMPLETE, onFooterLoadComplete);			footer.removeEventListener(IOErrorEvent.IO_ERROR, onFooterLoadError);			if (event)			{				transitionFooterIn();			}			onSiteLoadComplete();		}				//----------------------------------  		//  SITE COMPLETE    	//----------------------------------				/** Actions initiated after site load is complete **/		public function onSiteLoadComplete():void		{			trace("FullScreenSite.onSiteLoadComplete");			siteLoadCompleted = true;			initLightbox();			onStageResize();			if (siteXML.hasOwnProperty("fullscreen"))				addFullScreenButton();			track("Site Load Complete");		}				//----------------------------------  		//  LIGHTBOX    	//----------------------------------				/** Initializes and formats lightbox **/		public function initLightbox():void		{			trace("FullScreenSite.initLightbox");			lightbox = new Lightbox(format.lightboxFormat);			lightbox.contentPath = format.contentPath;			addChild(lightbox);			addEventListener(TextEvent.LINK, textLinkHandler);			lightbox.addEventListener(LightboxEvent.VIEW_CONTENT, onLightboxView);		}				/** Handles text link events (lightboxing) **/		public function textLinkHandler(event:TextEvent):void		{			trace("FullScreenSite.textLinkHandler "+event.text);			if (event.text.indexOf("lightbox{") != -1)			{				if (event.text.indexOf("set:") == -1)				{					var lightboxContentArray:Array = LightboxContentInfo.createContentArrayFromString(event.text);					lightbox.displayContent(lightboxContentArray);				}				else				{					var loader:URLLoader = new URLLoader(); 					loader.addEventListener(IOErrorEvent.IO_ERROR, onLightboxTextLoadError); 					loader.addEventListener(Event.COMPLETE, onLightboxTextLoadComplete); 										if (event.text.indexOf("url:") != -1)					{						contentSelect = event.text.slice(event.text.indexOf("url:")+4);						if (contentSelect.indexOf("}") != -1)							contentSelect = contentSelect.slice(0, contentSelect.indexOf("}"));						if (contentSelect.indexOf(",") != -1 && contentSelect.indexOf(":") != -1)							contentSelect = contentSelect.slice(0, contentSelect.indexOf(","));						contentSelect = contentSelect.replace(new RegExp("\\s"),"g");					}										var textFileName:String = event.text.slice(event.text.indexOf("set:")+4);					if (textFileName.indexOf("}") != -1)						textFileName = textFileName.slice(0, textFileName.indexOf("}"));					if (textFileName.indexOf(",") != -1)						textFileName = textFileName.slice(0, textFileName.indexOf(","));										loader.load(new URLRequest(format.contentPath + textFileName)); 				}			}		}				public function onLightboxTextLoadError(event:Event):void		{			trace("LightboxTextLoadError: Could not find external text file");		}				/** Load handler for externally loaded text formatted with lightbox content info **/		public function onLightboxTextLoadComplete(event:Event):void		{			var lightboxContentArray:Array = LightboxContentInfo.createContentArrayFromString(String(event.target.data));			if (contentSelect != "")				lightboxContentArray.unshift(contentSelect);			lightbox.displayContent(lightboxContentArray);		}				/** Initiates display of lightbox content **/		public function onLightboxView(event:LightboxEvent):void		{			track("Lightbox View", event.contentInfo.url);		}				//----------------------------------  		//  SCROLLBAR    	//----------------------------------		/** Initializes and formats scrollbar **/		public function initScrollbar():void		{			trace("FullScreenSite.initScrollbar");			scrollbar = new FullScreenScrollbar(format.scrollbar.scrubColor, 												format.scrollbar.scrubAlpha, 												format.scrollbar.trackColor,												format.scrollbar.trackAlpha);			scrollbar.addEventListener(UIEvent.SCROLLBAR_MOVE, onScroll);			addChild(scrollbar);			if (container.height + format.margin > stage.stageHeight)				scrollbar.transitionIn();		}				/** Scrolls content **/		public function onScroll(event:UIEvent):void		{			scrollbar.clickPercent = (stage.stageHeight / container.height) * .5;			var maxScroll:Number = container.height + (format.margin * 2) - stage.stageHeight;			var newY:Number = format.margin - (maxScroll * scrollbar.percent);			TweenLite.to(container, .5, {y:newY, ease:Expo.easeOut});		}				//----------------------------------  		//  FULLSCREEN BUTTON    	//----------------------------------		/** Adds button for switching to full screen mode **/		public function addFullScreenButton():void		{			trace("FullScreenSite.addFullScreenButton");			var fullScreenButton:BasicButton = new BasicButton();			var fullScreenButtonGraphic:Sprite = contentCreator.create(siteXML.fullscreen);			fullScreenButton.addChild(fullScreenButtonGraphic);			fullScreenButton.x = int(siteXML.fullscreen.@x);			fullScreenButton.y = int(siteXML.fullscreen.@y);			fullScreenButton.addEventListener(MouseEvent.CLICK, onFullScreenClick);			container.addChild(fullScreenButton);		}				public function onFullScreenClick(event:MouseEvent):void		{			trace("FullScreenSite.onFullScreenClick");			if (stage.displayState == StageDisplayState.NORMAL)				stage.displayState = StageDisplayState.FULL_SCREEN;			else				stage.displayState = StageDisplayState.NORMAL;		}				//----------------------------------  		//  STAGE RESIZE    	//----------------------------------				/** Stage resizing manager **/		public function onStageResize(event:Event = null):void		{			centerContainer();						if (scrollbar) 			{				scrollbar.x = stage.stageWidth - scrollbar.width;				scrollbar.visible = container.height + format.margin > stage.stageHeight;			}							if (background.numChildren > 0)				scaleBackgroundToStage();		}				public function centerContainer():void		{			if (stage.stageWidth > containerWidth + format.margin) 				container.x = (stage.stageWidth -  containerWidth) / 2;			else 				container.x = format.margin;		}				/** Scales background to stage **/		public function scaleBackgroundToStage():void		{			if (stage.stageWidth > background.width)			{				background.width = stage.stageWidth;				background.scaleY = background.scaleX;			}			else			{				if (background.scaleX > 1)				{					background.width = stage.stageWidth;					background.scaleY = background.scaleX;				}			}		}				//----------------------------------  		//  TRACKING    	//----------------------------------				/** Initializes Google Analytics Event Tracking **/		public function initTracking() 		{			tracker = new GATracker(this, trackingCode, "AS3", false); 			tracker.trackPageview( "/"+siteXML.title);		}				/** Send tracking call to Google Analytics **/		public function track(trackAction:String, trackLabel:String = "") 		{			if (tracker) 			{				trace("TRACKING | "+siteXML.title+" action:"+trackAction+" label:"+trackLabel);				tracker.trackEvent(siteXML.title, trackAction, trackLabel);			}		}				//----------------------------------  		//  ERRORS    	//----------------------------------				/** Error message handler **/		public function errorHandler(errorMessage:String):void 		{			trace(errorMessage);		}		//----------------------------------  		//  TRANSITIONS    	//----------------------------------			/** Transition in animation for header **/		public function transitionHeaderIn():void		{			trace("FullScreenSite.transitionHeaderIn");			header.visible = true;			TweenLite.from(header, .5, {alpha:0});		}				/** Transition in animation for nav **/		public function transitionNavIn():void		{			trace("FullScreenSite.transitionHeaderIn");			nav.y = header.height;			container.addChild(nav);		}				/** Transition in animation for sidebar **/		public function transitionSidebarIn():void		{			trace("FullScreenSite.transitionSidebarIn");			if (sidebar.container.height < sectionContainer.height)				sidebar.background.height = sectionContainer.height;			else				sidebar.setBackground();			sidebar.visible = true;			container.addChild(sidebar);			sidebar.x = sectionContainer.width + sidebar.format.marginLeft;			sidebar.y = sectionContainer.y;			TweenLite.from(sidebar, .5, {alpha:0});		}				/** Transition in animation for footer **/		public function transitionFooterIn():void		{			trace("FullScreenSite.transitionFooterIn");			footer.visible = true;			container.addChild(footer);			if (sectionContainer.height > sidebar.height)				footer.y = sectionContainer.y + sectionContainer.height;			else				footer.y = sidebar.y + sidebar.height;			TweenLite.from(footer, .5, {alpha:0});		}				/** Transition in animation for content sections **/		public function transitionSectionIn(section:DisplayObject):void		{			trace("FullScreenSite.transitionSectionIn");			section.visible = true;			section.alpha = 1;			TweenLite.from(section, .5, {alpha:0, onComplete:transitionSectionInComplete, onCompleteParams:[section]});		}				/** Transition in animation for content sections **/		public function transitionSectionInComplete(section:DisplayObject):void		{			trace("FullScreenSite.transitionSectionInComplete");			if (sidebar)			{				if (sectionContainer.height > sidebar.container.height)				{					TweenLite.to(sidebar.background, .5, {height:sectionContainer.height, ease:Expo.easeInOut });					if (footer)						TweenLite.to(footer, .5, {y:sectionContainer.y + sectionContainer.height, ease:Expo.easeInOut});				}				else				{					sidebar.setBackground();					TweenLite.to(sidebar.background, .5, {scaleY:1, ease:Expo.easeInOut});					if (footer)						TweenLite.to(footer, .5, {y:sidebar.y + (sidebar.background.height * 1/sidebar.background.scaleY), ease:Expo.easeInOut});				}			}						if (!scrollbar)				TweenLite.delayedCall(.5, initScrollbar);						TweenLite.delayedCall(.51, onStageResize);		}				/** Transition out animation for content sections **/		public function transitionSectionOut(section:DisplayObject):void		{			trace("FullScreenSite.transitionSectionOut");			TweenLite.to(section, .5, {alpha:0, onComplete:transitionSectionOutComplete, onCompleteParams:[section]});		}				/** Transition out animation for content sections **/		public function transitionSectionOutComplete(section:DisplayObject):void		{			trace("FullScreenSite.transitionSectionOutComplete");			section.parent.removeChild(section);		}	}}