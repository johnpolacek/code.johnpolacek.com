package com.johnpolacek.display {	import flash.display.Sprite;	import flash.display.Shape;	import flash.display.LineScaleMode;	import flash.display.JointStyle;	import flash.events.IOErrorEvent;	import com.johnpolacek.utils.StringUtils;	import com.johnpolacek.display.AutoSlideShowDisplay;	import com.johnpolacek.display.ImageDisplay;	import com.johnpolacek.display.VideoDisplay;	import com.johnpolacek.display.AudioDisplay;	import com.johnpolacek.display.FlashDisplay;	/** * A Simple Factory class that constructs ContentDisplay sprites  * Uses the ContentCreator simple Factory to generate content containers * * @example  * <code>import com.johnpolacek.display.ContentDisplay; * import com.johnpolacek.display.ContentDisplayCreator; * var example:ContentDisplay; * var creator:ContentDisplayCreator = new ContentCreator(); * example = creator.create("video.flv"); * </code> *  * @version  * <b>4 Apr 2010</b> Changed class/package name. Renamed createContent() method to create() <br> * <b>29 Mar 2010</b> Updated contentInfo property names for audio <br> * <b>12 Mar 2010</b> Added contentPath property and background properties for FlashDisplay <br> * <b>6 Mar 2010</b> * @see com.johnpolacek.display.ContentDisplay * @author John Polacek, john@johnpolacek.com */		public class ContentDisplayCreator {				private var contentURLs:Array;				/**  Constant for generating ImageDisplay sprites **/		public static const IMAGE:String  = "image";		/**  Constant for generating VideoDisplay sprites **/		public static const VIDEO:String  = "video";		/**  Constant for generating AudioDisplay sprites **/		public static const AUDIO:String  = "audio";		/**  Constant for generating AutoSlideShowDisplay sprites **/		public static const SLIDESHOW:String  = "slideshow";		/**  Constant for generating FlashDisplay sprites **/		public static const FLASH:String  = "flash";		/**  Constant for catching invalid content types **/		public static const INVALID:String  = "invalid";				/**  Can set to add a path to all createContent calls **/		public var contentPath:String = "";		/** Builds and returns a ContentDisplay sprite 		* 		* @param contentURL Filepath to the content		* @param contentInfo Object that holds additional values for content. Default is null		* @return If content is valid, returns a ContentDisplay sprite		**/		public function create(contentURL:String, contentInfo:Object = null) 		{			trace("ContentDisplayCreator.create  url:"+contentURL);			contentURL = contentURL.replace(" ","");			contentURLs = contentURL.split(",");			var contentType:String = getContentType(contentURLs);			var contentDisplay:Sprite;						if (contentPath!="")			{				var n:int = contentURLs.length;				for (var i:int = 0; i < n; i++)				{					contentURLs[i] = contentPath + String(contentURLs[i]);				}			}						switch (contentType) {				case IMAGE:				{					contentDisplay = new ImageDisplay(contentURLs[0]);					break;				}								case VIDEO:				{					var video:VideoDisplay = new VideoDisplay();					video.loadVideo(contentURLs[0]);					contentDisplay = video;					break;				}								case AUDIO:				{					var audio:AudioDisplay = new AudioDisplay();					if (contentInfo) 					{						if (!contentInfo.audioTitles) 							contentInfo.audioTitles = null;												if (!contentInfo.audioSubtitles) 							contentInfo.audioSubtitles = null;												if (contentInfo.audioTitleTextFormat) 							audio.titleTextFormat = contentInfo.audioTitleTextFormat;												if (contentInfo.audioSubtitleTextFormat) 							audio.subtitleTextFormat = contentInfo.audioSubtitleTextFormat;												if (contentInfo.audioBackgroundColor) 							audio.backgroundColor = contentInfo.audioBackgroundColor;													if (contentInfo.audioButtonColor) 							audio.buttonColor = contentInfo.audioButtonColor;												if (contentInfo.audioTrackColor) 							audio.trackColor = contentInfo.audioTrackColor;												if (contentInfo.audioPlayerHeight)  							audio.playerHeight = contentInfo.audioPlayerHeight;												if (contentInfo.audioPlayerWidth)  							audio.playerWidth = contentInfo.audioPlayerWidth;																	audio.loadAudio(contentURLs, contentInfo.audioTitles, contentInfo.audioSubtitles);						contentDisplay = audio;					}					else  					{						audio.loadAudio(contentURLs);					}					contentDisplay = audio;					break;				}								case SLIDESHOW:				{					contentDisplay = new AutoSlideShowDisplay(contentURLs);					break;				}								case FLASH:				{					var flashWidth:Number = 0;					var flashHeight:Number = 0;					var flashBackgroundAlpha:Number = 0;					var flashBackgroundColor:Number = 0xFFFFFF;					if (contentInfo)					{						if (contentInfo.flashWidth) 							flashWidth = contentInfo.flashWidth;						if (contentInfo.flashHeight) 							flashHeight = contentInfo.flashHeight;						if (contentInfo.flashBackgroundColor) 							flashBackgroundColor = contentInfo.flashBackgroundColor;						if (contentInfo.flashBackgroundAlpha) 							flashBackgroundColor = contentInfo.flashBackgroundAlpha;											}					contentDisplay = new FlashDisplay(contentURLs[0], flashWidth, flashHeight, flashBackgroundAlpha, flashBackgroundColor);					break;				}								default:				{					trace("ContentType: "+contentType+" is not valid");				}			}			trace(contentDisplay + " created");			return contentDisplay;		}				private function getContentType(contentURLs:Array):String		{			var contentType:String;			var ext:String = StringUtils.getFileExtension(contentURLs[0]);						//----------------------------------			//  create content for single parameter content types			//----------------------------------						if (contentURLs.length == 1)			{				if (ext=="jpg" || ext=="gif" || ext=="png")  					contentType = IMAGE;				else if (ext=="mov" || ext=="flv" || ext=="mp4")  					contentType = VIDEO;				else if (ext=="mp3")  					contentType = AUDIO;				else if (ext=="swf")  					contentType = FLASH;				else 					contentType = INVALID;			}									//----------------------------------			//  create content for multiple parameter content types			//----------------------------------				else			{				// slideshow				if (ext=="jpg" || ext=="gif" || ext=="png")  					contentType = SLIDESHOW;				else if (ext=="mp3")  					contentType = AUDIO;				else 					contentType = INVALID;			}						return contentType;		}	}}