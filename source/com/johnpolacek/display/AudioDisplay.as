package com.johnpolacek.display {		import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.text.Font;	import flash.text.TextFormat;	import com.johnpolacek.media.AudioPlayer;	import com.johnpolacek.media.AudioPlayerMenu;	/** * The AudioDisplay class creates audio players that load and  * play mp3 files with optional title and subtitle text fields.  * Includes a SoundSpectrum class that animates during playback. * * @example  * <code>import com.johnpolacek.display.AudioDisplay; * var filepaths:Array = ["example1.mp3","example2.mp3","example3.mp3"]; * var songs:Array = ["Song Title 1","Song Title 2","Song Title 3"]; * var artists:Array = ["Artist Name 1","Artist Name 2","Artist Name 3"]; * var mp3player:AudioDisplay = new AudioDisplay(); * mp3player.loadAudio(filepaths, songs, artists); * addChild(mp3player); * </code> * * @see com.johnpolacek.media.AudioPlayer * @see com.johnpolacek.media.AudioPlayerMenu * @version  * <b>12 Jul 2010</b> Added autoPlay parameter. <br>  * <b>16 Apr 2010</b> Improved error handling <br>  * <b>30 Mar 2010</b> AudioPlayers now use TextFormat objects for TextFields <br> * <b>27 Mar 2010</b> Added LightboxContentInfo and LightboxEvent classes <br> * <b> 7 Mar 2010</b> * @author John Polacek, john@johnpolacek.com */	 		public class AudioDisplay extends ContentDisplay	{				private var players:Array = [];		private var playersLoaded:int = 0;		public var menu:AudioPlayerMenu;		/** The TextFormat for the title TextField.  **/		public var titleTextFormat:TextFormat;		/** The TextFormat for the subtitle TextField.  **/		public var subtitleTextFormat:TextFormat;		/** Color of player background. Default is 0x000000 */		public var backgroundColor:uint = 0x000000;		/** Color of player buttons. Default is 0xFFFFFF */		public var buttonColor:uint = 0xFFFFFF;		/** Player track color. Default is 0x666666 */		public var trackColor:uint = 0x666666;		/** Player track alpha. Default is 1 */		public var trackAlpha:Number = 1;		/** Width (in pixels) of player. Default is 400 */		public var playerWidth:Number = 400;		/** Height (in pixels) of player (not inluding progress bar). Default is 50 */		public var playerHeight:Number = 50;		/** If true, top player in menu starts playback on load complete. Default is false */		public var autoPlay:Boolean = false;						public function AudioDisplay() 		{			menu = new AudioPlayerMenu();			addChild(menu);		}				public function loadAudio(urls:Array, titles:Array = null, subtitles:Array = null):void		{			for (var i:int = 0; i < urls.length; i++)			{				var player:AudioPlayer = new AudioPlayer();				player.backgroundColor = backgroundColor;				player.buttonColor = buttonColor;				player.trackColor = trackColor;				player.playerWidth = playerWidth;				player.playerHeight = playerHeight;				player.addEventListener(IOErrorEvent.IO_ERROR, onIOError);								if (titleTextFormat) 					player.titleTextFormat = titleTextFormat;								if (subtitleTextFormat) 					player.subtitleTextFormat = subtitleTextFormat;								if (titles) 					player.titleText = titles[i];								if (subtitles) 					player.subtitleText = subtitles[i];								players.push(player);				player.load(urls[i], false);				player.addEventListener(Event.COMPLETE, onAudioLoadComplete);				menu.addPlayer(player);			}		}				/** Remove event listeners and clear children */		override public function destroy():void		{			while (this.numChildren > 0)				removeChildAt(0);		}			//--------------------------------------------------------------------------    //    //  EVENT HANDLERS    //    //--------------------------------------------------------------------------					private function onAudioLoadComplete(event:Event):void		{			event.target.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			event.target.removeEventListener(Event.COMPLETE, onAudioLoadComplete);			playersLoaded++;			if (playersLoaded == players.length)				onLoadComplete(null);		}	}}