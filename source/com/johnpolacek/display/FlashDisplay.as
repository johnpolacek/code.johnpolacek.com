package com.johnpolacek.display {		import flash.display.BlendMode;	import flash.display.Sprite;	import flash.display.Loader;	import flash.display.Bitmap;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.IOErrorEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import com.johnpolacek.shapes.RectangleShape;	/** * Loads and displays swf files. *  * @version  * <b>12 Mar 2010</b> Added backgroundAlpha property <br> * <b>7 Mar 2010</b> * @author John Polacek, john@johnpolacek.com */	 		public class FlashDisplay extends ContentDisplay	{				/** Sets width of the swf (can set to smaller size to crop) */	 		public var flashWidth:Number;		/** Sets height of the swf (can set to smaller size to crop) */			public var flashHeight:Number;		/** Sets transparency of background shape behind loaded swf */			public var backgroundAlpha:Number;		/** Sets color of background shape behind loaded swf */			public var backgroundColor:uint;				private var loader:Loader;		private var container:Sprite;				/** 		* @param filepath url of the swf.		* @param w Sets flashWidth. Default is 0 (flashWidth gets set by loader)		* @param h Sets flashHeight. Default is 0 (flashHeight gets set by loader)		* @param bc Sets backgroundColor Default is 0xFFFFFF.		**/		public function FlashDisplay(filepath:String, w:Number = 0, h:Number = 0, ba:Number = 0, bc:uint = 0xFFFFFF) 		{			flashWidth = w;			flashHeight = h;			backgroundColor = bc;			backgroundAlpha = ba;			container = new Sprite();			loader = new Loader;			var loaderURL:URLRequest=new URLRequest(filepath);			loader.load(loaderURL);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);			addEventListener(Event.ADDED_TO_STAGE, onAdded);			addEventListener(Event.REMOVED_FROM_STAGE, onRemoved);		}				/** Crops loaded swf to flashWidth/flashHeight, adds background and dispatches Event.COMPLETE */		override public function onLoadComplete(event:Event):void 		{			loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onLoadComplete);						if (flashWidth==0) 				flashWidth = loader.contentLoaderInfo.width;						if (flashHeight==0) 				flashHeight = loader.contentLoaderInfo.height;						loader.contentLoaderInfo.content.blendMode = BlendMode.LAYER;			if (backgroundAlpha > 0)			{				var bgr:Sprite = new RectangleShape(flashWidth, flashHeight, backgroundColor);				addChild(bgr);			}			var maskRect:Sprite = new RectangleShape(flashWidth, flashHeight);			addChild(container);			addChild(maskRect);			container.mask = maskRect;			dispatchEvent(new Event(Event.COMPLETE));		}				override public function destroy():void		{			removeEventListener(Event.ADDED_TO_STAGE, onAdded);			removeEventListener(Event.REMOVED_FROM_STAGE, onRemoved);			while (this.numChildren > 0)				removeChildAt(0);		}				private function onAdded(event:Event):void		{			container.addChild(loader);		}				private function onRemoved(event:Event):void		{			container.removeChild(loader);		}	}}