package com.johnpolacek.animation {		import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.Timer;	import com.greensock.TweenLite;	import com.greensock.plugins.*;	import com.johnpolacek.shapes.EllipseShape;	import com.johnpolacek.shapes.RectangleShape;/** * The ContentContainer class is designed for the loading and display  * of html-formatted content that is loaded from an xml formatted * document. XML conforms to the DocBook DTD. * * @example  * <br /> * <code> * // add a preloading animation to the center of the stage * preloadAnimation = new PreloadAnimationSquares(); * preloadAnimation.x = stage.stageWidth/2; * preloadAnimation.y = stage.stageHeight/2; * addChild(preloadAnimation); * preloadAnimation.start(); * * // On load complete, end the animation * function onLoadComplete(event:Event):void * { *     preloadAnimation.finish(); * } * </code>  * * <b>24 Aug 2010</b> * @author John Polacek, john@johnpolacek.com */		public class PreloadAnimationSquares extends Sprite {				public var size:int = 10;		public var color:uint = 0x666666;		public var numShapes:int = 7		public var spacing:int = 20;		public var loopSpeed:Number = 6;		public var animationTimer:Timer;		public var scale:Number = 1.5;		private var isPlaying:Boolean = false;						public function PreloadAnimationSquares(s:int = 8, c:uint = 0x666666, n:int = 6, sp:int = 20, l:Number = 1, sc:Number = 1.5)		{			size = s;			color = c;			numShapes = n;			spacing = sp;			loopSpeed = l;			scale = sc;			createShapes();			this.alpha = 0;			TweenPlugin.activate([AutoAlphaPlugin]);		}				/** Fades animation in, starts looping animation timer **/ 		public function start():void		{			trace("PreloadAnimation.start");			isPlaying = true;			animationTimer = new Timer(loopSpeed * 1001);			animationTimer.addEventListener(TimerEvent.TIMER, animate, false, 0, true);			animationTimer.start();			this.alpha = 0;			TweenLite.to(this, 2, {autoAlpha:1, delay:1});					}				/** Creates shapes and adds them to the display list **/ 		public function createShapes():void		{			trace("PreloadAnimation.createShapes");			for (var i:int = 0; i < numShapes; i++)			{				var square:RectangleShape = new RectangleShape(size, size, color);				square.alignToCenter();				square.x = i * spacing;				addChild(square);			}		}				/** Animation for a single loop **/ 		public function animate(event:TimerEvent = null):void		{			for (var i:int = 0; i < numShapes; i++)			{				TweenLite.to(this.getChildAt(i), .25, {scaleX:scale, scaleY:scale, delay:(i/numShapes) * loopSpeed, overwrite:false});				TweenLite.to(this.getChildAt(i), .25, {scaleX:1, scaleY:1, delay:((i/numShapes) * loopSpeed) + .25, overwrite:false});			}		}				/** Fades animation out, then sets visibility to false **/ 		public function finish():void		{			trace("PreloadAnimation.finish");			animationTimer.removeEventListener(TimerEvent.TIMER, animate);			isPlaying = false;			TweenLite.killTweensOf(this);			TweenLite.to(this, .5, {autoAlpha:0, overwrite:true});			animationTimer.stop();		}			}}