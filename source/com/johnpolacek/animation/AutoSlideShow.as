package com.johnpolacek.animation {		import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.Shape;	import flash.display.Bitmap;	import flash.display.Loader;	import flash.display.Stage;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.utils.Timer;	import com.greensock.TweenLite;	import com.greensock.easing.Expo;	import com.johnpolacek.utils.DisplayUtils;	import com.greensock.plugins.*;	 /** * AutoSlideShow creates a sequenced, looping animation of all the children of a target Sprite. *  * @example  * <br /> * Basic usage: * <code>import com.johnpolacek.animation.AutoSlideShow; * var slideshow:AutoSlideShow = new AutoSlideShow(); * slideshow.start(example_mc); * </code> *  * Example using ImageStack class  to load external images,  * and then animating with the FLY_IN_RANDOM transition style (see Constants): * <code>import com.johnpolacek.animation.AutoSlideShow; * import com.johnpolacek.media.ImageStack; *  * var slideshow:AutoSlideShow = new AutoSlideShow(); * var stack:ImageStack = new ImageStack("images/image1.jpg", *                                       "images/image2.jpg",  *                                       "images/image3.jpg",  *                                       "images/image4.jpg"); * stack.addEventListener(Event.COMPLETE, onStackComplete); *  * function onStackComplete(event:Event):void * { *      addChild(stack); *      slideshow.start(stack, AutoSlideShow.FLY_IN_RANDOM); * } * </code> *  * @see com.johnpolacek.media.ImageStack * @version 6 Mar 2010 * @author John Polacek, john@johnpolacek.com */	 		public class AutoSlideShow {				/** Duration that each slide stays on screen, in seconds. **/		public var slideDuration:Number = 3;		/** Duration of the slide transition, in seconds. **/		public var transitionSpeed:Number = .5;			// 				private var isFirstTransition:Boolean = true;	// skips 1st transition		private var transitionTimer:Timer;				// calls the transition method		private var transition:Function;				// transition method set by setTransition		private var currSlide:DisplayObject;		private var newSlide:DisplayObject;		private var slidesContainer:Sprite;		private var slidesMask:Shape;				public static const FLY_IN_RANDOM:String  = "flyInRandom";		public static const FLY_IN_RIGHT:String  = "flyInRight";		public static const FLY_IN_LEFT:String  = "flyInLeft";		public static const FLY_IN_TOP:String  = "flyInTop";		public static const FLY_IN_BOTTOM:String  = "flyInBottom";		public static const CROSS_FADE:String  = "crossFade";		public static const DEFAULT_TRANSITION:String  = CROSS_FADE;		// Default transition style				function AutoSlideShow()		{			TweenPlugin.activate([AutoAlphaPlugin]);		}					//--------------------------------------------------------------------------    //    //  PUBLIC METHODS    //    //--------------------------------------------------------------------------					/**		* Begins slideshow animation		* 		* @param target Children of the target sprite get animated		* @param style The animation style for the slideshow. Default is CROSS_FADE		* @param dur Sets slideDuration (Duration that each slide stays on screen, in seconds)		* @param speed Sets transitionSpeed property (Duration of the slide transition, in seconds)		*/		public function start(target:Sprite, style = DEFAULT_TRANSITION, dur = 3, speed = .5):void		{			// set values			//			slideDuration = dur * 1000;			transitionSpeed = speed;			slidesContainer = target;						// set initial state of slides			//			DisplayUtils.hideAllChildren(slidesContainer);			currSlide = slidesContainer.getChildAt(0);			currSlide.visible = true;						// create mask for slidesContainer			//			slidesMask = new Shape;			slidesMask.graphics.beginFill(0x000000);			slidesMask.graphics.drawRect(slidesContainer.x, slidesContainer.y, slidesContainer.width, slidesContainer.height);			if (slidesContainer.parent) 			{				slidesContainer.parent.addChild(slidesMask);				slidesContainer.mask = slidesMask;			}			else			{				trace("ERROR: slideshow must be on display list to start")			}						// create transition timer			//			transitionTimer = new Timer(slideDuration, slidesContainer.numChildren);			transitionTimer.addEventListener(TimerEvent.TIMER, transitionTimerHandler);            transitionTimer.addEventListener(TimerEvent.TIMER_COMPLETE, transitionTimerCompleteHandler);			transitionTimer.start();						// set transition method			//			switch (style)			{				case FLY_IN_RANDOM:						{					setTransition(flyInRandom);					break;				}								case FLY_IN_RIGHT:						{					setTransition(flyInRight);					break;				}								case FLY_IN_LEFT:						{					setTransition(flyInLeft);					break;				}								case FLY_IN_TOP:						{					setTransition(flyInTop);					break;				}								case FLY_IN_BOTTOM:						{					setTransition(flyInBottom);					break;				}								case CROSS_FADE:						{					setTransition(crossFade);					break;				}							default:						{					// no default					break;				}			}		}				/** Ends slideshow animation */		public function stop():void		{			transitionTimer.stop();		}					//--------------------------------------------------------------------------    //    //  EVENT HANDLERS    //    //--------------------------------------------------------------------------							private function transitionTimerHandler(event:TimerEvent):void 		{           if (!isFirstTransition)		   {			   if (newSlide) 			   		currSlide = newSlide;			   newSlide = slidesContainer.getChildAt(transitionTimer.currentCount-1);			   if (slidesContainer.stage)			   		transition();			   else			   		stop();		   }		   else 		   {			   isFirstTransition = false;		   }        }				private function transitionTimerCompleteHandler(event:TimerEvent):void 		{           transitionTimer.reset();		   transitionTimer.start();        }			//--------------------------------------------------------------------------    //    //  TRANSITION FUNCTIONS    //    //--------------------------------------------------------------------------			private function setTransition(t:Function):void		{			transition = t;  // sets transition function called by the transitionTimerHandler		}				private function flyInRandom():void		{			// Assign Random Direction			//			var randomDirection_i:int = int(Math.random()*4);			switch (randomDirection_i)			{				case 0:						{					flyInLeft();					break;				}							case 1:						{					flyInRight();					break;				}							case 2:						{					flyInTop();					break;				}							case 3:						{					flyInBottom();					break;				}			}		}				private function flyInLeft():void		{			flyIn(-slidesContainer.width, 0);		}				private function flyInRight():void		{			flyIn(slidesContainer.width, 0);		}				private function flyInTop():void		{			flyIn(0, -slidesContainer.height);		}				private function flyInBottom():void		{			flyIn(0, slidesContainer.height);		}				private function flyIn(flyInX:Number, flyInY:Number):void		{			// Fly In			//			newSlide.x = flyInX;			newSlide.y = flyInY;			newSlide.visible = true;			TweenLite.to(newSlide, transitionSpeed, {x:0, y:0, ease:Expo.easeInOut});						// Fly Out			//			var flyOutX:Number = -flyInX;			var flyOutY:Number = -flyInY;			TweenLite.to(currSlide, transitionSpeed, {x:flyOutX, y:flyOutY, ease:Expo.easeInOut, onComplete:hideObject, onCompleteParams:[currSlide]});		}				private function crossFade():void		{			// Fade In			//			newSlide.alpha = 0;			TweenLite.to(newSlide, transitionSpeed, {autoAlpha:1});						// Fade Out			//			TweenLite.to(currSlide, transitionSpeed, {autoAlpha:0});		}				private function hideObject(obj:DisplayObject):void		{			obj.visible = false;		}	}}