package com.johnpolacek.ui {		import flash.display.Sprite;	import flash.events.MouseEvent;	import com.greensock.TweenLite;	import com.greensock.easing.Expo;	import com.johnpolacek.shapes.RectangleShape;	import com.johnpolacek.events.UIEvent;	import com.johnpolacek.ui.BasicButton	/** * The AccordionMenu class extends the BasicButtonMenu class * to support the addition of expandable panels to the buttons * * @example  * <br /> * <code> * var accordion:AccordionMenu = new AccordionMenu(); * </code> *  * Add expandable panel 'panelExample' to the top button * <code> * accordion.addPanel(panelExample, 0); * </code> * * Add expandable BasicButtonMenu panel to the 2nd button * <code> * accordion.addPanelMenu(buttonMenu, 1); * </code> * * Add event listener to detect when a main accordion button is clicked * <code> * accordion.addEventListener(UIEvent.BUTTON_SELECT, onNavButtonSelect); * </code> * * Add event listener to detect when expandable panel button is clicked * <code> * accordion.addEventListener(UIEvent.DROPDOWN_SELECT, onSubNavButtonSelect); * </code> * * @version  * <b>16 Jun 2010</b>  Faster panel animations <br>  * <b>11 Jun 2010</b>  <br>  * @author John Polacek, john@johnpolacek.com */	 	public class AccordionMenu extends BasicButtonMenu 	{		public var panels = [];		public var masks = [];		public var currPanel:int = -1;		public var isExpanded:Boolean = false;		public var isTweening:Boolean = false;		/** @param ba Alpha of button when not selected. Default .9*/		public function AccordionMenu(ba:Number = .9) 		{			buttonAlpha = ba;			isVertical = true;		}				/** Selects the active button for the menu */		override public function selectButton(buttonIndex:int):void		{			currButtonIndex = buttonIndex;			for (var i:int = 0; i < buttons.length; i++)			{				buttons[i].select(buttonIndex == i);			}						// if there is a graphic that highlights the selected button, update it			if (buttonSelectGraphic)				updateGraphic();						// if has an expandable panel			if (Boolean(panels[buttonIndex]))			{				if (buttonIndex != currPanel)				{					expandPanel();				}				else				{					currButtonIndex = -1;					collapse();				}			}			else			{				// if there is an expanded panel, close it				if (currPanel != -1)					collapse();			}		}				/** Adds an expandable panel to the targeted button */		public function addPanel(panel:Sprite, buttonIndex:int):void		{			if (panels.length < buttons.length)				panels.length = buttons.length;			panels[buttonIndex] = panel;			var panelMask:Sprite = new RectangleShape(panel.width, panel.height);			panel.y = buttons[buttonIndex].y + buttons[buttonIndex].height;			addChild(panel);			addChild(panelMask);			panel.mask = panelMask;			panelMask.y = buttons[buttonIndex].y + buttons[buttonIndex].height - panelMask.height;			masks[buttonIndex] = panelMask;			panels[buttonIndex] = panel;		}				/** Adds an expandable panel menu to the targeted button */		public function addPanelMenu(menu:BasicButtonMenu, buttonIndex:int):void		{			menu.bubbles = false;			menu.showButtonSelection = false;			menu.addEventListener(UIEvent.BUTTON_SELECT, onPanelMenuSelect);			addPanel(Sprite(menu), buttonIndex);		}				/** Expands the panel of the currently selected button (only 1 panel is expanded at a time) */		public function expandPanel():void		{			isTweening = true;			if (currPanel != -1)			{				collapse();			}			else			{				animateExpand();			}		}				/** Collapses the open panel */		public function collapse():void		{			isExpanded = false;			var collapseDistance = masks[currPanel].height;			TweenLite.to(masks[currPanel], .25, {y:masks[currPanel].y-collapseDistance, ease:Expo.easeInOut, onComplete:onCollapseComplete});			for (var i:int = currPanel + 1; i < buttons.length; i++)			{				TweenLite.to(buttons[i], .25, {y:buttons[i].y - collapseDistance, ease:Expo.easeInOut});			}		}				/** Actions taken after the panel is collapsed */		public function onCollapseComplete():void		{			// if there is a selected button, and the button has and expandable panel, open it			// otherwise, set current panel expanded to none			if (currButtonIndex != -1 && panels[currButtonIndex])				animateExpand();			else				currPanel = -1;		}				/** Panel expanding animation */		public function animateExpand():void		{			currPanel = currButtonIndex;			TweenLite.to(masks[currButtonIndex], .5, {y:buttons[currPanel].y + buttons[currPanel].height, ease:Expo.easeInOut, onComplete:onExpandComplete});			for (var i:int = currButtonIndex+1; i < buttons.length; i++)			{				TweenLite.to(buttons[i], .5, {y:buttons[i].y + masks[currButtonIndex].height, ease:Expo.easeInOut});			}		}				/** Actions taken after the panel is expanded */		public function onExpandComplete():void		{			isTweening = false;			isExpanded = true;		}				/** Panel menu button select handler */		public function onPanelMenuSelect(event:UIEvent):void		{			dispatchEvent(new UIEvent(UIEvent.DROPDOWN_SELECT, event.value));		}				/** Updates sizes of masks for dynamic panel sizes */		public function updateMasks():void		{			for (var i:int = 0; i < masks.length; i++)			{				if (masks[i])				{					masks[i].width = panels[i].width;					masks[i].height = panels[i].height;				}			}		}	}}