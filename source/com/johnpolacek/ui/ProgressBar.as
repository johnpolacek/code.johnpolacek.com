package com.johnpolacek.ui {		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.utils.Timer;	import com.johnpolacek.shapes.RectangleShape;	import com.johnpolacek.shapes.EllipseShape;	import com.johnpolacek.events.UIEvent;	/** * ProgressBar UI Component  * * @sends UIEvent.PROGRESS_UPDATE # Transmits progress percentage value (from 0 to 1) on user interaction *  * @author John Polacek, john@johnpolacek.com */	 		public class ProgressBar extends Sprite {				/** The percent of progress (between 0 and 1) */	 		public var percent:Number;				private var track:Sprite;		private var scrub:Sprite;		private var bar:Sprite;		private var barWidth:Number;		private var scrubTimer:Timer;		private var scrubBounds:Rectangle;		private var isScrubbing:Boolean = false;				/** 		* @param w Width (in pixels) of the ProgressBar sprite		* @param h Height (in pixels) of the ProgressBar sprite		* @param backgroundColor Background color of the ProgressBar sprite. Default 0x000000		* @param buttonColor Button color of the VolumeControl sprite. Default 0xFFFFFF		*/			public function ProgressBar(w:Number, h:Number, backgroundColor:uint = 0x000000, buttonColor:uint = 0xFFFFFF)		{			percent = 0;			barWidth = w;			track = new RectangleShape(w, h, buttonColor, .25, 0, 0, 0, false, h);			scrub = new EllipseShape(h, h, buttonColor);			scrub.alpha = .75			scrub.buttonMode = track.buttonMode = true;			bar = new RectangleShape(w, h, backgroundColor, .5, 0, 0, 0, false, h);			bar.visible = false;			addChild(track);			addChild(bar);			addChild(scrub);						track.addEventListener(MouseEvent.MOUSE_DOWN, onTrackClick);			scrub.addEventListener(MouseEvent.MOUSE_OVER, onScrubOver);			scrub.addEventListener(MouseEvent.MOUSE_OUT, onScrubOut);						scrub.addEventListener(MouseEvent.MOUSE_DOWN, onScrubDown);									scrubBounds = new Rectangle(scrub.x, scrub.y, barWidth - scrub.width, 0);						scrubTimer = new Timer(100);			scrubTimer.addEventListener(TimerEvent.TIMER, onScrub);		}				/** Sets the progress of the bar */	 		public function setProgress(p:Number):void		{			percent = p;						if (!isScrubbing) 				scrub.x = scrubBounds.width * percent;						if (percent > 0)  				bar.scaleX = percent;			else 				bar.visible = false;		}				private function updateProgress(p:Number):void		{			setProgress(p);			dispatchEvent(new UIEvent(UIEvent.PROGRESS_UPDATE, p));		}				private function onScrubOver(event:MouseEvent):void		{			scrub.alpha = 1;		}				private function onScrubOut(event:MouseEvent):void		{			scrub.alpha = .75;		}				private function onScrubDown(event:MouseEvent):void		{			startScrub();		}				private function onScrubUp(event:MouseEvent):void		{			stage.removeEventListener(MouseEvent.MOUSE_UP, onScrubUp);			stage.removeEventListener(Event.MOUSE_LEAVE, onScrubUp);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onScrub);			isScrubbing = false;			scrub.stopDrag();		}				private function startScrub():void		{			isScrubbing = true;			scrub.startDrag(false, scrubBounds);			stage.addEventListener(MouseEvent.MOUSE_UP, onScrubUp);			stage.addEventListener(Event.MOUSE_LEAVE, onScrubUp);			stage.addEventListener(MouseEvent.MOUSE_MOVE, onScrub);		}				private function onScrub(event:Event):void		{			updateProgress(scrub.x / scrubBounds.width);		}				private function onTrackClick(event:MouseEvent):void		{			scrub.x = event.localX - (scrub.width/2);			onScrub(null);			startScrub();		}	}}