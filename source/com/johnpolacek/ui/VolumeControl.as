package com.johnpolacek.ui {		import flash.events.MouseEvent;	import flash.display.Sprite;	import com.johnpolacek.events.UIEvent;	import com.johnpolacek.shapes.RectangleShape;	/** * Volume Control UI Component  * * @sends UIEvent.VOLUME_ADJUST # Transmits volume percentage value (from 0 to 1) on user interaction *  * @author John Polacek, john@johnpolacek.com */	 		public class VolumeControl extends Sprite {				private var volumeIcon:Sprite = new Sprite();		private var volumeIconBackground:Sprite = new Sprite();		private var volumeMask:Sprite = new Sprite();		private var hotSpot:Sprite = new Sprite();				/** 		* @param w Width (in pixels) of the VolumeControl sprite		* @param h Height (in pixels) of the VolumeControl sprite		* @param backgroundColor Background color of the VolumeControl sprite. Default 0x000000		* @param buttonColor Button color of the VolumeControl sprite. Default 0xFFFFFF		*/			public function VolumeControl(w:Number, h:Number, backgroundColor:uint = 0x000000, buttonColor:uint = 0xFFFFFF)		{			var bgr:Sprite = new RectangleShape(w, h, backgroundColor);			for (var i:int = 0; i < 6; i++)			{				var bar1:Sprite = new RectangleShape(w/8, ((h *.6)*(i/6))+1, buttonColor);								var bar2:Sprite = new RectangleShape(w/8, ((h *.6)*(i/6))+1, buttonColor);				bar1.x = bar2.x = i * (w/8);				bar1.y = bar2.y = h/2 - bar1.height+h/16;				volumeIcon.addChild(bar1);				volumeIconBackground.addChild(bar2);							}			volumeIcon.alpha = .8;			volumeIconBackground.alpha = .4;			volumeMask = new RectangleShape(volumeIcon.width, volumeIcon.height);			volumeIcon.x = volumeIconBackground.x = volumeMask.x = w/8;			volumeIcon.y = volumeIconBackground.y = volumeMask.y = h *.2			volumeIcon.mask = volumeMask;			hotSpot = new RectangleShape(w, h, backgroundColor, 0);			addChild(bgr);			addChild(volumeIconBackground);			addChild(volumeIcon);			addChild(volumeMask);			addChild(hotSpot);			hotSpot.addEventListener(MouseEvent.MOUSE_DOWN, onDown);			hotSpot.addEventListener(MouseEvent.MOUSE_OVER, onOver);			hotSpot.addEventListener(MouseEvent.MOUSE_OUT, onOut);				hotSpot.buttonMode = true;		}				/** Sets volume 		* @param v Volume level between 0 (mute) and 1 (max)		*/	 		public function setVolume(v:Number):void		{			if (v < 0)  				v = 0;						if (v > 1)  				v = 1;						volumeMask.scaleX = v;			dispatchEvent(new UIEvent(UIEvent.VOLUME_ADJUST, v));		}				private function onOver(event:MouseEvent):void		{			volumeIcon.alpha = 1;		}				private function onOut(event:MouseEvent):void		{			volumeIcon.alpha = .9;		}				private function onDown(event:MouseEvent):void		{			var newVolume:Number = event.localX/(hotSpot.width*.8);						if (newVolume < .2) 				newVolume = 0;						if (newVolume > .9) 				newVolume = 1;						setVolume(newVolume);		}	}}