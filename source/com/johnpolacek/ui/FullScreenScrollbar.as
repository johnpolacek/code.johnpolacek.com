package com.johnpolacek.ui {	/** * Simple scrollbar class for full screen flash apps * * @example  * <br> * Basic usage, where container sprite on stage is scrolled * <code>import com.johnpolacek.ui.FullScreenScrollbar; * import com.johnpolacek.events.UIEvent; *  * scrollbar = new FullScreenScrollbar(); * scrollbar.addEventListener(UIEvent.SCROLLBAR_MOVE, onScroll); * addChild(scrollbar); * * function onScroll(event:UIEvent):void * { * 		scrollbar.clickPercent = (stage.stageHeight/container.height) * .5; * 		var maxScroll:Number = container.height - stage.stageHeight + format.margin * 2; * 		var newY:Number = -(maxScroll * scrollbar.percent); * 		TweenLite.to(container, .5, {y:newY, ease:Expo.easeOut}); * } * </code> *  * To initiate scrolling, use the doScroll method.  * For example, a CLICK event that causes the scrollbar to scroll 50%: * <code>button.addEventListener(MouseEvent.CLICK, onClick); *  function onClick(event:MouseEvent):void * { * 		scrollbar.doScroll(.5); * } * </code> *  * @see com.johnpolacek.events.UIEvent * @version 4 Apr 2010 * @author John Polacek, john@johnpolacek.com */	 	import flash.display.BlendMode;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.ui.Keyboard;	import flash.utils.Timer;	import com.greensock.TweenLite;	import com.greensock.easing.Expo;	import com.earthbrowser.ebutils.MacMouseWheelHandler;	import com.johnpolacek.shapes.RectangleShape;	import com.johnpolacek.events.UIEvent;	public class FullScreenScrollbar extends Sprite {		/**  Percent scrolled (0=none 1=max) **/		public var percent:Number = 0;				/**  Percent scrolled when track is clicked **/		public var clickPercent:Number = .2;			/**  When content is tweening, block clicks/scrubbing events **/		public var isTweening:Boolean = false;			/**  Toggled by transitionIn() and transitionOut() **/		public var isActive:Boolean = false;		/**  If true, listens for up/down keyboard commands. **/		public var isKeyboardEnabled:Boolean = true;						private var scrubber:Sprite;		private var track:Sprite;		private var scrubberTimer:Timer;	//activated when scrubbing, checks for scrub position, more reliable than MOUSE_MOVE		private var boundRect:Rectangle;		private var thickness:int;		private var trackColor:uint;		private var trackAlpha:Number;		private var scrubberHeight:int;		/**  		* @param scrubberColor Sets color of scrubber. Default is 0xFFFFFF		* @param scrubberAlpha Sets alpha of scrubber. Default is .5		* @param tc Sets color of track. Default is 0x000000		* @param ta Sets alpha of track. Default is .25		* @param tc Sets thickness of track. Default is 16 pixels		* @param sh Sets height of scrubber. Default is 80 pixels		**/		public function FullScreenScrollbar(scrubberColor:uint = 0xFFFFFF,											scrubberAlpha:Number = .5,											tc:uint = 0x000000,											ta:Number = .25,											t:int = 16,											sh:int = 80) 		{			thickness = t;			scrubberHeight= sh;			trackColor = tc;			trackAlpha = ta;			this.visible = false;			this.tabChildren = false;			track = new RectangleShape(thickness, 100, trackColor, trackAlpha);			scrubber = new RectangleShape(thickness, scrubberHeight, scrubberColor, scrubberAlpha);			scrubberTimer = new Timer(100,0);			track.buttonMode = scrubber.buttonMode=true;			addChild(track);			addChild(scrubber);			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}			//--------------------------------------------------------------------------    //    //  Public Methods    //    //--------------------------------------------------------------------------				/**  		* Initiates scrolling		* 		* @param p Sets percent to scroll to		**/		public function doScroll(p:Number):void		{			if (p != percent) 			{				isTweening = true;				percent = p;				if (percent > 1) percent = 1;				if (percent < 0) percent = 0;				var scrubY:Number = track.y + (percent * (track.height - scrubber.height));				TweenLite.to(scrubber, .5, {y:scrubY, ease:Expo.easeOut, onComplete:tweenComplete});				dispatchEvent(new UIEvent(UIEvent.SCROLLBAR_MOVE));			}		}				/**  		* Assigns percentage scrolled on a single track click (clickPercent value)		* 		* @param cp Sets clickPercent value		**/		public function setClickPercent(cp:Number):void 		{			clickPercent = cp;		}			//--------------------------------------------------------------------------    //    //  Event Handling    //    //--------------------------------------------------------------------------				private function onAddedToStage(event:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			track.addEventListener(MouseEvent.MOUSE_DOWN, trackClick);			scrubber.addEventListener(MouseEvent.MOUSE_DOWN, scrubberClick);			MacMouseWheelHandler.init(stage);			stage.addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheel);			stage.addEventListener(Event.RESIZE, onStageResize);			this.x = stage.stageWidth - this.width;			if (isKeyboardEnabled)				enableKeyCommands();			onStageResize(null);			transitionIn();		}				private function mouseWheel(event:MouseEvent):void 		{			if (!isTweening) {				var scrollAmount:Number = (-event.delta/12) * track.height;				var scrubY:Number = scrubber.y+scrollAmount;				if (scrubY<track.y) {					scrubY=track.y;//prevent scroll above the track				}				if (scrubY>track.height+track.y) 				{					scrubY=track.height+track.y;//prevent scroll beyond the track				}				doScroll((scrubY-track.y)/track.height);			}		}				private function scrubberClick(event:MouseEvent):void		{			if (!isTweening) {				scrubber.startDrag(false,boundRect);				stage.addEventListener(MouseEvent.MOUSE_UP, scrubberRelease);				scrubberTimer.addEventListener(TimerEvent.TIMER, scrubberTimerHandler);				scrubberTimer.start();			}		}				private function trackClick(event:MouseEvent):void		{			var trackClickPercent:Number = event.localY / event.currentTarget.height * event.currentTarget.scaleY;			if (trackClickPercent > percent) doScroll(percent + clickPercent);			else doScroll(percent - clickPercent);		}				private function scrubberTimerHandler(event:Event):void		{			//check position of scrubber, if changed update scrolling			var scrollPos:Number=scrubber.y-track.y;			if (percent!=scrollPos/(track.height-scrubber.height)) 			{				percent=scrollPos/(track.height-scrubber.height);				dispatchEvent(new UIEvent(UIEvent.SCROLLBAR_MOVE));			}		}				private function scrubberRelease(event:Event):void		{			scrubber.stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_UP, scrubberRelease);			scrubberTimer.stop();			scrubberTimer.removeEventListener("timer", scrubberTimerHandler);		}				public function enableKeyCommands():void		{			if (!stage.hasEventListener(KeyboardEvent.KEY_DOWN))				stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyboard);		}				public function disableKeyCommands():void		{			if (stage.hasEventListener(KeyboardEvent.KEY_DOWN))				stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKeyboard);		}				private function onKeyboard(event:KeyboardEvent):void		{			if (event.keyCode == Keyboard.DOWN || event.keyCode == Keyboard.PAGE_DOWN) 			{ 				doScroll(percent + clickPercent);			} 						if (event.keyCode == Keyboard.UP || event.keyCode == Keyboard.PAGE_UP) 			{ 				doScroll(percent - clickPercent);			} 		}				private function tweenComplete():void 		{			isTweening=false;		}				public function onStageResize(event:Event):void 		{			this.x = stage.stageWidth - this.width;			track.height = stage.stageHeight;			scrubber.y = percent * (track.height - scrubber.height);			boundRect = new Rectangle(0, track.y, 0, track.height-scrubber.height);		}			//--------------------------------------------------------------------------    //    //  Transitions    //    //--------------------------------------------------------------------------				public function transitionIn():void		{			this.visible = true;			scrubber.x += 45;			track.x += 45;			TweenLite.to(scrubber, .5, {x:0, ease:Expo.easeOut, delay:.5});			TweenLite.to(track, .5, {x:0, ease:Expo.easeOut, delay:.5});			isActive = true;		}				public function transitionOut() :void		{			TweenLite.to(scrubber, .5, {x:45, ease:Expo.easeInOut});			TweenLite.to(track, .5, {x:45, ease:Expo.easeInOut});			isActive = false;		}	}}