package com.johnpolacek.ui {	/** * Simple scrollbar class for full screen flash apps *  * @see com.johnpolacek.events.UIEvent * @version 14 Apr 2010 * @author John Polacek, john@johnpolacek.com */	 	import flash.display.BlendMode;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import com.greensock.TweenLite;	import com.greensock.easing.Expo;	import flash.utils.Timer;	import com.johnpolacek.shapes.RectangleShape;	import com.johnpolacek.events.UIEvent;	public class Scrollbar extends Sprite {		/**  Percent scrolled (0=none 1=max) **/		public var percent:Number = 0;				/**  Percent scrolled when track is clicked **/		public var clickPercent:Number = .2;			/**  When content is tweening, block clicks/scrubbing events **/		public var isTweening:Boolean = false;			/**  Toggled by transitionIn() and transitionOut() **/		public var isActive:Boolean = false;		public var scrubber:Sprite;		public var track:Sprite;				private var scrubberTimer:Timer;	//activated when scrubbing, checks for scrub position, more reliable than MOUSE_MOVE		private var boundsRect:Rectangle;		private var thickness:int;		private var trackColor:uint;		private var trackAlpha:Number;		private var scrubberLength:int;		private var trackLength:int;		private var isVertical:Boolean;		/**  		* @param scrubberColor Sets color of scrubber. Default is 0xFFFFFF		* @param scrubberAlpha Sets alpha of scrubber. Default is .5		* @param tc Sets color of track. Default is 0x000000		* @param ta Sets alpha of track. Default is .25		* @param tc Sets thickness of track. Default is 16 pixels		* @param sl Sets height of scrubber. Default is 80 pixels		**/		public function Scrollbar(trackLength:int,								  scrubberColor:uint = 0xFFFFFF,								  scrubberAlpha:Number = .5,								  tc:uint = 0x000000,								  ta:Number = .25,								  t:int = 16,								  sl:int = 80,								  v = true)		{			thickness = t;			trackColor = tc;			trackAlpha = ta;			scrubberLength = sl;			isVertical = v;			this.tabChildren = false;			track = new RectangleShape(isVertical ? thickness : trackLength, isVertical ? trackLength : thickness, trackColor, trackAlpha);			scrubber = new RectangleShape(isVertical ? thickness : scrubberLength, isVertical ? scrubberLength : thickness, scrubberColor, scrubberAlpha);			scrubberTimer = new Timer(100,0);			track.buttonMode = scrubber.buttonMode=true;			addChild(track);			addChild(scrubber);			boundsRect = new Rectangle(0, 0, isVertical ? 0 : trackLength - scrubberLength, isVertical ? trackLength - scrubberLength : 0);						track.addEventListener(MouseEvent.MOUSE_DOWN, trackClick);			scrubber.addEventListener(MouseEvent.MOUSE_DOWN, scrubberClick);		}			//--------------------------------------------------------------------------    //    //  Public Methods    //    //--------------------------------------------------------------------------				/**  		* Initiates scrolling		* 		* @param p Sets percent to scroll to		**/		public function doScroll(p:Number):void		{			if (p != percent) 			{				isTweening = true;				percent = p;				if (percent > 1) percent = 1;				if (percent < 0) percent = 0;				var scrubPos:Number;				if (isVertical)				{					scrubPos = track.y + (percent * boundsRect.height);					TweenLite.to(scrubber, .5, {y:scrubPos, ease:Expo.easeOut, onComplete:tweenComplete});				}				else				{					scrubPos = track.x + (percent * boundsRect.width);					TweenLite.to(scrubber, .5, {x:scrubPos, ease:Expo.easeOut, onComplete:tweenComplete});				}				dispatchEvent(new UIEvent(UIEvent.SCROLLBAR_MOVE));			}		}				/**  		* Assigns percentage scrolled on a single track click (clickPercent value)		* 		* @param cp Sets clickPercent value		**/		public function setClickPercent(cp:Number):void 		{			clickPercent = cp;		}			//--------------------------------------------------------------------------    //    //  Event Handling    //    //--------------------------------------------------------------------------				private function scrubberClick(event:MouseEvent):void		{			if (!isTweening) 			{				scrubber.startDrag(false, boundsRect);				stage.addEventListener(MouseEvent.MOUSE_UP, scrubberRelease);				scrubberTimer.addEventListener(TimerEvent.TIMER, scrubberTimerHandler);				scrubberTimer.start();			}		}				private function trackClick(event:MouseEvent):void		{			var trackClickPercent:Number;			if (isVertical)				trackClickPercent = event.localY / event.currentTarget.height * event.currentTarget.scaleY;			else				trackClickPercent = event.localX / event.currentTarget.width * event.currentTarget.scaleX;						if (trackClickPercent > percent) doScroll(percent + clickPercent);				else doScroll(percent - clickPercent);		}				private function scrubberTimerHandler(event:Event):void		{			//check position of scrubber, if changed update scrolling			var newPercent:Number;						if (isVertical)				newPercent = scrubber.y / boundsRect.height;			else				newPercent = scrubber.x / boundsRect.width;							if (newPercent != percent) 			{				percent = newPercent;				dispatchEvent(new UIEvent(UIEvent.SCROLLBAR_MOVE));			}		}				private function scrubberRelease(event:Event):void		{			scrubber.stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_UP, scrubberRelease);			scrubberTimer.stop();			scrubberTimer.removeEventListener("timer", scrubberTimerHandler);		}				private function tweenComplete():void 		{			isTweening=false;		}			}}