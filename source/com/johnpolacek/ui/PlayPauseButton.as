package com.johnpolacek.ui {		import flash.events.MouseEvent;	import flash.display.Shape;	import flash.display.Sprite;	import com.johnpolacek.events.UIEvent;	import com.johnpolacek.shapes.RectangleShape;	/** * Play/Pause Toggle Button UI Component  * * @sends UIEvent.PAUSE_CLICK # On pause button click * @sends UIEvent.PLAY_CLICK # On play button click *  * @author John Polacek, john@johnpolacek.com */	 		public class PlayPauseButton extends Sprite {				private var playIcon:Sprite = new Sprite();		private var pauseIcon:Sprite = new Sprite();		private var playState:Boolean = true;				/** 		* @param w Width (in pixels) of the PlayPauseButton sprite		* @param h Height (in pixels) of the PlayPauseButton sprite		* @param backgroundColor Background color of the PlayPauseButton sprite. Default 0x000000		* @param buttonColor Button color of the PlayPauseButton sprite. Default 0xFFFFFF		*/			public function PlayPauseButton(w:Number, h:Number, backgroundColor:uint = 0x000000, buttonColor:uint = 0xFFFFFF)		{			this.buttonMode = true;			this.addEventListener(MouseEvent.CLICK, onClick);			this.addEventListener(MouseEvent.MOUSE_OVER, onOver);			this.addEventListener(MouseEvent.MOUSE_OUT, onOut);						var bgr:Sprite = new RectangleShape(w, h, backgroundColor);			var triangle:Shape = new Shape();			triangle.graphics.beginFill(buttonColor);			triangle.graphics.lineTo(w/2, h/4);			triangle.graphics.lineTo(0, w/2);			triangle.graphics.lineTo(0,0);			triangle.graphics.endFill();			playIcon.addChild(triangle);			var rect1:Sprite = new RectangleShape(w/6, h/2, buttonColor);			var rect2:Sprite = new RectangleShape(w/6, h/2, buttonColor);			rect2.x = w/3;			pauseIcon.addChild(rect1);			pauseIcon.addChild(rect2);			pauseIcon.x = playIcon.x = w/4;			pauseIcon.y = playIcon.y = h/4;			addChild(bgr);			addChild(playIcon);			addChild(pauseIcon);			pauseIcon.alpha = playIcon.alpha = .9;			pauseIcon.visible = false;		}				/** Toggles play/pause button visibility (does not transmit UIEvent) */		public function toggle():void		{			pauseIcon.visible = !pauseIcon.visible;			playIcon.visible = !pauseIcon.visible;		}				/** Sets play state. A value of true shows pause button (does not transmit UIEvent) */		public function setPlayState(ps:Boolean):void		{			playState = ps;			if (playState)			{				pauseIcon.visible = true;				playIcon.visible = false;			}			else			{				pauseIcon.visible = false;				playIcon.visible = true;			}		}				/** Gets play state. A value of true means playback is occuring */		public function getPlayState():Boolean		{			return playState;		}				private function onOver(event:MouseEvent):void		{			pauseIcon.alpha = playIcon.alpha = 1;		}				private function onOut(event:MouseEvent):void		{			pauseIcon.alpha = playIcon.alpha = .9;		}				private function onClick(event:MouseEvent):void		{			if (playIcon.visible) 				dispatchEvent(new UIEvent(UIEvent.PLAY_CLICK));			else 				dispatchEvent(new UIEvent(UIEvent.PAUSE_CLICK));		}			}}